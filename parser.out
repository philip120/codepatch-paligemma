Grammar:

Rule 0     S' -> code_block
Rule 1     code_block -> statement
Rule 2     code_block -> statement code_block
Rule 3     code_block -> code_block statement
Rule 4     statement -> COMMAND
Rule 5     statement -> expr NEWLINE
Rule 6     statement -> expr SEMICOLON
Rule 7     statement -> NEWLINE
Rule 8     statement -> SEMICOLON
Rule 9     statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON
Rule 10    statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
Rule 11    statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE
Rule 12    statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE
Rule 13    statement -> switch_block END NEWLINE
Rule 14    statement -> TRY code_block CATCH statement code_block END NEWLINE
Rule 15    statement -> WHILE statement code_block END NEWLINE
Rule 16    statement -> if_block END SEMICOLON
Rule 17    statement -> if_block END NEWLINE
Rule 18    statement -> BREAK SEMICOLON
Rule 19    statement -> CONTINUE SEMICOLON
Rule 20    statement -> BREAK NEWLINE
Rule 21    statement -> CONTINUE NEWLINE
Rule 22    statement -> FOR statement code_block END SEMICOLON
Rule 23    statement -> FOR statement code_block END NEWLINE
Rule 24    statement -> RETURN expr SEMICOLON
Rule 25    statement -> RETURN expr NEWLINE
Rule 26    statement -> FUNCTION statement code_block END NEWLINE
Rule 27    if_block -> IF statement code_block
Rule 28    if_block -> if_block ELSEIF statement code_block
Rule 29    if_block -> if_block ELSE SEMICOLON code_block
Rule 30    if_block -> if_block ELSE NEWLINE code_block
Rule 31    switch_block -> SWITCH statement CASE statement code_block
Rule 32    switch_block -> switch_block CASE statement code_block
Rule 33    expr -> STRING
Rule 34    expr -> NUMBER
Rule 35    expr -> NAME
Rule 36    expr -> expr CTRANSPOSE  [precedence=left, level=12]
Rule 37    expr -> expr TRANSPOSE  [precedence=left, level=12]
Rule 38    expr -> expr MPOWER expr  [precedence=left, level=12]
Rule 39    expr -> expr POWER expr  [precedence=left, level=12]
Rule 40    expr -> expr LDIVIDE expr  [precedence=left, level=10]
Rule 41    expr -> expr RDIVIDE expr  [precedence=left, level=10]
Rule 42    expr -> expr TIMES expr  [precedence=left, level=10]
Rule 43    expr -> expr MLDIVIDE expr  [precedence=left, level=10]
Rule 44    expr -> expr MRDIVIDE expr  [precedence=left, level=10]
Rule 45    expr -> expr MTIMES expr  [precedence=left, level=10]
Rule 46    expr -> expr MINUS expr  [precedence=left, level=9]
Rule 47    expr -> expr PLUS expr  [precedence=left, level=9]
Rule 48    expr -> expr NE expr  [precedence=left, level=7]
Rule 49    expr -> expr EQ expr  [precedence=left, level=7]
Rule 50    expr -> expr GE expr  [precedence=left, level=7]
Rule 51    expr -> expr GT expr  [precedence=left, level=7]
Rule 52    expr -> expr LE expr  [precedence=left, level=7]
Rule 53    expr -> expr LT expr  [precedence=left, level=7]
Rule 54    expr -> expr AND expr  [precedence=left, level=6]
Rule 55    expr -> expr OR expr  [precedence=left, level=5]
Rule 56    expr -> expr ANDAND expr  [precedence=left, level=4]
Rule 57    expr -> expr OROR expr  [precedence=left, level=3]
Rule 58    expr -> expr COLON expr  [precedence=left, level=8]
Rule 59    expr -> NOT expr  [precedence=left, level=11]
Rule 60    expr -> MINUS expr  [precedence=left, level=9]
Rule 61    expr -> PLUS expr  [precedence=left, level=9]
Rule 62    expr -> AT LPAREN args RPAREN expr
Rule 63    expr -> expr DOT NAME
Rule 64    expr -> expr ELLIPSIS NEWLINE
Rule 65    expr -> LPAREN expr RPAREN
Rule 66    expr -> expr ASSIGN expr  [precedence=left, level=1]
Rule 67    expr -> LSQR matrx_rows matrx_elements RSQR
Rule 68    expr -> LSQR matrx_elements RSQR
Rule 69    expr -> LSQR matrx_rows RSQR
Rule 70    expr -> LCURL matrx_rows matrx_elements RCURL
Rule 71    expr -> LCURL matrx_elements RCURL
Rule 72    expr -> LCURL matrx_rows RCURL
Rule 73    expr -> expr LCURL args RCURL
Rule 74    expr -> expr LPAREN args RPAREN
Rule 75    args -> expr
Rule 76    args -> expr COMMA expr  [precedence=left, level=2]
Rule 77    args -> args COMMA expr  [precedence=left, level=2]
Rule 78    matrx_rows -> matrx_elements SEMICOLON
Rule 79    matrx_rows -> matrx_rows matrx_elements SEMICOLON
Rule 80    matrx_elements -> expr
Rule 81    matrx_elements -> matrx_elements COMMA matrx_elements  [precedence=left, level=2]
Rule 82    matrx_elements -> matrx_elements matrx_elements

Unused terminals:

    ignore_COMMENT

Terminals, with rules where they appear:

AND                  : 54
ANDAND               : 56
ASSIGN               : 66
AT                   : 62
BREAK                : 18 20
CASE                 : 31 32
CATCH                : 14
COLON                : 58
COMMA                : 76 77 81
COMMAND              : 4
CONTINUE             : 19 21
CTRANSPOSE           : 36
DOT                  : 63
ELLIPSIS             : 64
ELSE                 : 29 30
ELSEIF               : 28
END                  : 9 10 11 12 13 14 15 16 17 22 23 26
EQ                   : 49
FOR                  : 22 23
FUNCTION             : 26
GE                   : 50
GT                   : 51
IF                   : 27
LCURL                : 70 71 72 73
LDIVIDE              : 40
LE                   : 52
LPAREN               : 62 65 74
LSQR                 : 67 68 69
LT                   : 53
MINUS                : 46 60
MLDIVIDE             : 43
MPOWER               : 38
MRDIVIDE             : 44
MTIMES               : 45
NAME                 : 35 63
NE                   : 48
NEWLINE              : 5 7 9 11 11 12 13 14 15 17 20 21 23 25 26 30 64
NOT                  : 59
NUMBER               : 34
OR                   : 55
OROR                 : 57
OTHERWISE            : 9 10 11 12
PLUS                 : 47 61
POWER                : 39
RCURL                : 70 71 72 73
RDIVIDE              : 41
RETURN               : 24 25
RPAREN               : 62 65 74
RSQR                 : 67 68 69
SEMICOLON            : 6 8 9 10 10 12 16 18 19 22 24 29 78 79
STRING               : 33
SWITCH               : 31
TIMES                : 42
TRANSPOSE            : 37
TRY                  : 14
WHILE                : 15
error                : 
ignore_COMMENT       : 

Nonterminals, with rules where they appear:

args                 : 62 73 74 77
code_block           : 2 3 9 10 11 12 14 14 15 22 23 26 27 28 29 30 31 32 0
expr                 : 5 6 24 25 36 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 61 62 63 64 65 66 66 73 74 75 76 76 77 80
if_block             : 16 17 28 29 30
matrx_elements       : 67 68 70 71 78 79 81 81 82 82
matrx_rows           : 67 69 70 72 79
statement            : 1 2 3 14 15 22 23 26 27 28 31 31 32
switch_block         : 9 10 11 12 13 32


state 0

    (0) S' -> . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    code_block                     shift and go to state 1
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 1

    (0) S' -> code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 2

    (1) code_block -> statement .
    (2) code_block -> statement . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
  ! shift/reduce conflict for LCURL resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 1 (code_block -> statement .)
    CATCH           reduce using rule 1 (code_block -> statement .)
    END             reduce using rule 1 (code_block -> statement .)
    ELSEIF          reduce using rule 1 (code_block -> statement .)
    ELSE            reduce using rule 1 (code_block -> statement .)
    OTHERWISE       reduce using rule 1 (code_block -> statement .)
    CASE            reduce using rule 1 (code_block -> statement .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 29
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 3

    (4) statement -> COMMAND .
    COMMAND         reduce using rule 4 (statement -> COMMAND .)
    NEWLINE         reduce using rule 4 (statement -> COMMAND .)
    SEMICOLON       reduce using rule 4 (statement -> COMMAND .)
    TRY             reduce using rule 4 (statement -> COMMAND .)
    WHILE           reduce using rule 4 (statement -> COMMAND .)
    BREAK           reduce using rule 4 (statement -> COMMAND .)
    CONTINUE        reduce using rule 4 (statement -> COMMAND .)
    FOR             reduce using rule 4 (statement -> COMMAND .)
    RETURN          reduce using rule 4 (statement -> COMMAND .)
    FUNCTION        reduce using rule 4 (statement -> COMMAND .)
    STRING          reduce using rule 4 (statement -> COMMAND .)
    NUMBER          reduce using rule 4 (statement -> COMMAND .)
    NAME            reduce using rule 4 (statement -> COMMAND .)
    NOT             reduce using rule 4 (statement -> COMMAND .)
    MINUS           reduce using rule 4 (statement -> COMMAND .)
    PLUS            reduce using rule 4 (statement -> COMMAND .)
    AT              reduce using rule 4 (statement -> COMMAND .)
    LPAREN          reduce using rule 4 (statement -> COMMAND .)
    LSQR            reduce using rule 4 (statement -> COMMAND .)
    LCURL           reduce using rule 4 (statement -> COMMAND .)
    SWITCH          reduce using rule 4 (statement -> COMMAND .)
    IF              reduce using rule 4 (statement -> COMMAND .)
    $end            reduce using rule 4 (statement -> COMMAND .)
    CATCH           reduce using rule 4 (statement -> COMMAND .)
    END             reduce using rule 4 (statement -> COMMAND .)
    ELSEIF          reduce using rule 4 (statement -> COMMAND .)
    ELSE            reduce using rule 4 (statement -> COMMAND .)
    OTHERWISE       reduce using rule 4 (statement -> COMMAND .)
    CASE            reduce using rule 4 (statement -> COMMAND .)


state 4

    (5) statement -> expr . NEWLINE
    (6) statement -> expr . SEMICOLON
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         shift and go to state 30
    SEMICOLON       shift and go to state 31
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 5

    (7) statement -> NEWLINE .
    COMMAND         reduce using rule 7 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> NEWLINE .)
    SEMICOLON       reduce using rule 7 (statement -> NEWLINE .)
    TRY             reduce using rule 7 (statement -> NEWLINE .)
    WHILE           reduce using rule 7 (statement -> NEWLINE .)
    BREAK           reduce using rule 7 (statement -> NEWLINE .)
    CONTINUE        reduce using rule 7 (statement -> NEWLINE .)
    FOR             reduce using rule 7 (statement -> NEWLINE .)
    RETURN          reduce using rule 7 (statement -> NEWLINE .)
    FUNCTION        reduce using rule 7 (statement -> NEWLINE .)
    STRING          reduce using rule 7 (statement -> NEWLINE .)
    NUMBER          reduce using rule 7 (statement -> NEWLINE .)
    NAME            reduce using rule 7 (statement -> NEWLINE .)
    NOT             reduce using rule 7 (statement -> NEWLINE .)
    MINUS           reduce using rule 7 (statement -> NEWLINE .)
    PLUS            reduce using rule 7 (statement -> NEWLINE .)
    AT              reduce using rule 7 (statement -> NEWLINE .)
    LPAREN          reduce using rule 7 (statement -> NEWLINE .)
    LSQR            reduce using rule 7 (statement -> NEWLINE .)
    LCURL           reduce using rule 7 (statement -> NEWLINE .)
    SWITCH          reduce using rule 7 (statement -> NEWLINE .)
    IF              reduce using rule 7 (statement -> NEWLINE .)
    $end            reduce using rule 7 (statement -> NEWLINE .)
    CATCH           reduce using rule 7 (statement -> NEWLINE .)
    END             reduce using rule 7 (statement -> NEWLINE .)
    ELSEIF          reduce using rule 7 (statement -> NEWLINE .)
    ELSE            reduce using rule 7 (statement -> NEWLINE .)
    OTHERWISE       reduce using rule 7 (statement -> NEWLINE .)
    CASE            reduce using rule 7 (statement -> NEWLINE .)


state 6

    (8) statement -> SEMICOLON .
    COMMAND         reduce using rule 8 (statement -> SEMICOLON .)
    NEWLINE         reduce using rule 8 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 8 (statement -> SEMICOLON .)
    TRY             reduce using rule 8 (statement -> SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> SEMICOLON .)
    FOR             reduce using rule 8 (statement -> SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> SEMICOLON .)
    STRING          reduce using rule 8 (statement -> SEMICOLON .)
    NUMBER          reduce using rule 8 (statement -> SEMICOLON .)
    NAME            reduce using rule 8 (statement -> SEMICOLON .)
    NOT             reduce using rule 8 (statement -> SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> SEMICOLON .)
    AT              reduce using rule 8 (statement -> SEMICOLON .)
    LPAREN          reduce using rule 8 (statement -> SEMICOLON .)
    LSQR            reduce using rule 8 (statement -> SEMICOLON .)
    LCURL           reduce using rule 8 (statement -> SEMICOLON .)
    SWITCH          reduce using rule 8 (statement -> SEMICOLON .)
    IF              reduce using rule 8 (statement -> SEMICOLON .)
    $end            reduce using rule 8 (statement -> SEMICOLON .)
    CATCH           reduce using rule 8 (statement -> SEMICOLON .)
    END             reduce using rule 8 (statement -> SEMICOLON .)
    ELSEIF          reduce using rule 8 (statement -> SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> SEMICOLON .)
    OTHERWISE       reduce using rule 8 (statement -> SEMICOLON .)
    CASE            reduce using rule 8 (statement -> SEMICOLON .)


state 7

    (9) statement -> switch_block . OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> switch_block . OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> switch_block . OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> switch_block . OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> switch_block . END NEWLINE
    (32) switch_block -> switch_block . CASE statement code_block
    OTHERWISE       shift and go to state 60
    END             shift and go to state 61
    CASE            shift and go to state 62


state 8

    (14) statement -> TRY . code_block CATCH statement code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    code_block                     shift and go to state 63
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 9

    (15) statement -> WHILE . statement code_block END NEWLINE
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 64
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 10

    (16) statement -> if_block . END SEMICOLON
    (17) statement -> if_block . END NEWLINE
    (28) if_block -> if_block . ELSEIF statement code_block
    (29) if_block -> if_block . ELSE SEMICOLON code_block
    (30) if_block -> if_block . ELSE NEWLINE code_block
    END             shift and go to state 65
    ELSEIF          shift and go to state 66
    ELSE            shift and go to state 67


state 11

    (18) statement -> BREAK . SEMICOLON
    (20) statement -> BREAK . NEWLINE
    SEMICOLON       shift and go to state 68
    NEWLINE         shift and go to state 69


state 12

    (19) statement -> CONTINUE . SEMICOLON
    (21) statement -> CONTINUE . NEWLINE
    SEMICOLON       shift and go to state 70
    NEWLINE         shift and go to state 71


state 13

    (22) statement -> FOR . statement code_block END SEMICOLON
    (23) statement -> FOR . statement code_block END NEWLINE
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 72
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 14

    (24) statement -> RETURN . expr SEMICOLON
    (25) statement -> RETURN . expr NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 73

state 15

    (26) statement -> FUNCTION . statement code_block END NEWLINE
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 74
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 16

    (33) expr -> STRING .
    NEWLINE         reduce using rule 33 (expr -> STRING .)
    SEMICOLON       reduce using rule 33 (expr -> STRING .)
    CTRANSPOSE      reduce using rule 33 (expr -> STRING .)
    TRANSPOSE       reduce using rule 33 (expr -> STRING .)
    MPOWER          reduce using rule 33 (expr -> STRING .)
    POWER           reduce using rule 33 (expr -> STRING .)
    LDIVIDE         reduce using rule 33 (expr -> STRING .)
    RDIVIDE         reduce using rule 33 (expr -> STRING .)
    TIMES           reduce using rule 33 (expr -> STRING .)
    MLDIVIDE        reduce using rule 33 (expr -> STRING .)
    MRDIVIDE        reduce using rule 33 (expr -> STRING .)
    MTIMES          reduce using rule 33 (expr -> STRING .)
    MINUS           reduce using rule 33 (expr -> STRING .)
    PLUS            reduce using rule 33 (expr -> STRING .)
    NE              reduce using rule 33 (expr -> STRING .)
    EQ              reduce using rule 33 (expr -> STRING .)
    GE              reduce using rule 33 (expr -> STRING .)
    GT              reduce using rule 33 (expr -> STRING .)
    LE              reduce using rule 33 (expr -> STRING .)
    LT              reduce using rule 33 (expr -> STRING .)
    AND             reduce using rule 33 (expr -> STRING .)
    OR              reduce using rule 33 (expr -> STRING .)
    ANDAND          reduce using rule 33 (expr -> STRING .)
    OROR            reduce using rule 33 (expr -> STRING .)
    COLON           reduce using rule 33 (expr -> STRING .)
    DOT             reduce using rule 33 (expr -> STRING .)
    ELLIPSIS        reduce using rule 33 (expr -> STRING .)
    ASSIGN          reduce using rule 33 (expr -> STRING .)
    LCURL           reduce using rule 33 (expr -> STRING .)
    LPAREN          reduce using rule 33 (expr -> STRING .)
    RPAREN          reduce using rule 33 (expr -> STRING .)
    RSQR            reduce using rule 33 (expr -> STRING .)
    COMMA           reduce using rule 33 (expr -> STRING .)
    STRING          reduce using rule 33 (expr -> STRING .)
    NUMBER          reduce using rule 33 (expr -> STRING .)
    NAME            reduce using rule 33 (expr -> STRING .)
    NOT             reduce using rule 33 (expr -> STRING .)
    AT              reduce using rule 33 (expr -> STRING .)
    LSQR            reduce using rule 33 (expr -> STRING .)
    RCURL           reduce using rule 33 (expr -> STRING .)


state 17

    (34) expr -> NUMBER .
    NEWLINE         reduce using rule 34 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 34 (expr -> NUMBER .)
    CTRANSPOSE      reduce using rule 34 (expr -> NUMBER .)
    TRANSPOSE       reduce using rule 34 (expr -> NUMBER .)
    MPOWER          reduce using rule 34 (expr -> NUMBER .)
    POWER           reduce using rule 34 (expr -> NUMBER .)
    LDIVIDE         reduce using rule 34 (expr -> NUMBER .)
    RDIVIDE         reduce using rule 34 (expr -> NUMBER .)
    TIMES           reduce using rule 34 (expr -> NUMBER .)
    MLDIVIDE        reduce using rule 34 (expr -> NUMBER .)
    MRDIVIDE        reduce using rule 34 (expr -> NUMBER .)
    MTIMES          reduce using rule 34 (expr -> NUMBER .)
    MINUS           reduce using rule 34 (expr -> NUMBER .)
    PLUS            reduce using rule 34 (expr -> NUMBER .)
    NE              reduce using rule 34 (expr -> NUMBER .)
    EQ              reduce using rule 34 (expr -> NUMBER .)
    GE              reduce using rule 34 (expr -> NUMBER .)
    GT              reduce using rule 34 (expr -> NUMBER .)
    LE              reduce using rule 34 (expr -> NUMBER .)
    LT              reduce using rule 34 (expr -> NUMBER .)
    AND             reduce using rule 34 (expr -> NUMBER .)
    OR              reduce using rule 34 (expr -> NUMBER .)
    ANDAND          reduce using rule 34 (expr -> NUMBER .)
    OROR            reduce using rule 34 (expr -> NUMBER .)
    COLON           reduce using rule 34 (expr -> NUMBER .)
    DOT             reduce using rule 34 (expr -> NUMBER .)
    ELLIPSIS        reduce using rule 34 (expr -> NUMBER .)
    ASSIGN          reduce using rule 34 (expr -> NUMBER .)
    LCURL           reduce using rule 34 (expr -> NUMBER .)
    LPAREN          reduce using rule 34 (expr -> NUMBER .)
    RPAREN          reduce using rule 34 (expr -> NUMBER .)
    RSQR            reduce using rule 34 (expr -> NUMBER .)
    COMMA           reduce using rule 34 (expr -> NUMBER .)
    STRING          reduce using rule 34 (expr -> NUMBER .)
    NUMBER          reduce using rule 34 (expr -> NUMBER .)
    NAME            reduce using rule 34 (expr -> NUMBER .)
    NOT             reduce using rule 34 (expr -> NUMBER .)
    AT              reduce using rule 34 (expr -> NUMBER .)
    LSQR            reduce using rule 34 (expr -> NUMBER .)
    RCURL           reduce using rule 34 (expr -> NUMBER .)


state 18

    (35) expr -> NAME .
    NEWLINE         reduce using rule 35 (expr -> NAME .)
    SEMICOLON       reduce using rule 35 (expr -> NAME .)
    CTRANSPOSE      reduce using rule 35 (expr -> NAME .)
    TRANSPOSE       reduce using rule 35 (expr -> NAME .)
    MPOWER          reduce using rule 35 (expr -> NAME .)
    POWER           reduce using rule 35 (expr -> NAME .)
    LDIVIDE         reduce using rule 35 (expr -> NAME .)
    RDIVIDE         reduce using rule 35 (expr -> NAME .)
    TIMES           reduce using rule 35 (expr -> NAME .)
    MLDIVIDE        reduce using rule 35 (expr -> NAME .)
    MRDIVIDE        reduce using rule 35 (expr -> NAME .)
    MTIMES          reduce using rule 35 (expr -> NAME .)
    MINUS           reduce using rule 35 (expr -> NAME .)
    PLUS            reduce using rule 35 (expr -> NAME .)
    NE              reduce using rule 35 (expr -> NAME .)
    EQ              reduce using rule 35 (expr -> NAME .)
    GE              reduce using rule 35 (expr -> NAME .)
    GT              reduce using rule 35 (expr -> NAME .)
    LE              reduce using rule 35 (expr -> NAME .)
    LT              reduce using rule 35 (expr -> NAME .)
    AND             reduce using rule 35 (expr -> NAME .)
    OR              reduce using rule 35 (expr -> NAME .)
    ANDAND          reduce using rule 35 (expr -> NAME .)
    OROR            reduce using rule 35 (expr -> NAME .)
    COLON           reduce using rule 35 (expr -> NAME .)
    DOT             reduce using rule 35 (expr -> NAME .)
    ELLIPSIS        reduce using rule 35 (expr -> NAME .)
    ASSIGN          reduce using rule 35 (expr -> NAME .)
    LCURL           reduce using rule 35 (expr -> NAME .)
    LPAREN          reduce using rule 35 (expr -> NAME .)
    RPAREN          reduce using rule 35 (expr -> NAME .)
    RSQR            reduce using rule 35 (expr -> NAME .)
    COMMA           reduce using rule 35 (expr -> NAME .)
    STRING          reduce using rule 35 (expr -> NAME .)
    NUMBER          reduce using rule 35 (expr -> NAME .)
    NAME            reduce using rule 35 (expr -> NAME .)
    NOT             reduce using rule 35 (expr -> NAME .)
    AT              reduce using rule 35 (expr -> NAME .)
    LSQR            reduce using rule 35 (expr -> NAME .)
    RCURL           reduce using rule 35 (expr -> NAME .)


state 19

    (60) expr -> MINUS . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 75

state 20

    (61) expr -> PLUS . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 76

state 21

    (59) expr -> NOT . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 77

state 22

    (62) expr -> AT . LPAREN args RPAREN expr
    LPAREN          shift and go to state 78


state 23

    (65) expr -> LPAREN . expr RPAREN
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 79

state 24

    (67) expr -> LSQR . matrx_rows matrx_elements RSQR
    (68) expr -> LSQR . matrx_elements RSQR
    (69) expr -> LSQR . matrx_rows RSQR
    (78) matrx_rows -> . matrx_elements SEMICOLON
    (79) matrx_rows -> . matrx_rows matrx_elements SEMICOLON
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_rows                     shift and go to state 80
    matrx_elements                 shift and go to state 81
    expr                           shift and go to state 82

state 25

    (70) expr -> LCURL . matrx_rows matrx_elements RCURL
    (71) expr -> LCURL . matrx_elements RCURL
    (72) expr -> LCURL . matrx_rows RCURL
    (78) matrx_rows -> . matrx_elements SEMICOLON
    (79) matrx_rows -> . matrx_rows matrx_elements SEMICOLON
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_rows                     shift and go to state 83
    matrx_elements                 shift and go to state 84
    expr                           shift and go to state 82

state 26

    (31) switch_block -> SWITCH . statement CASE statement code_block
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 85
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 27

    (27) if_block -> IF . statement code_block
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 86
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 28

    (3) code_block -> code_block statement .
    COMMAND         reduce using rule 3 (code_block -> code_block statement .)
    NEWLINE         reduce using rule 3 (code_block -> code_block statement .)
    SEMICOLON       reduce using rule 3 (code_block -> code_block statement .)
    TRY             reduce using rule 3 (code_block -> code_block statement .)
    WHILE           reduce using rule 3 (code_block -> code_block statement .)
    BREAK           reduce using rule 3 (code_block -> code_block statement .)
    CONTINUE        reduce using rule 3 (code_block -> code_block statement .)
    FOR             reduce using rule 3 (code_block -> code_block statement .)
    RETURN          reduce using rule 3 (code_block -> code_block statement .)
    FUNCTION        reduce using rule 3 (code_block -> code_block statement .)
    STRING          reduce using rule 3 (code_block -> code_block statement .)
    NUMBER          reduce using rule 3 (code_block -> code_block statement .)
    NAME            reduce using rule 3 (code_block -> code_block statement .)
    NOT             reduce using rule 3 (code_block -> code_block statement .)
    MINUS           reduce using rule 3 (code_block -> code_block statement .)
    PLUS            reduce using rule 3 (code_block -> code_block statement .)
    AT              reduce using rule 3 (code_block -> code_block statement .)
    LPAREN          reduce using rule 3 (code_block -> code_block statement .)
    LSQR            reduce using rule 3 (code_block -> code_block statement .)
    LCURL           reduce using rule 3 (code_block -> code_block statement .)
    SWITCH          reduce using rule 3 (code_block -> code_block statement .)
    IF              reduce using rule 3 (code_block -> code_block statement .)
    $end            reduce using rule 3 (code_block -> code_block statement .)
    CATCH           reduce using rule 3 (code_block -> code_block statement .)
    END             reduce using rule 3 (code_block -> code_block statement .)
    ELSEIF          reduce using rule 3 (code_block -> code_block statement .)
    ELSE            reduce using rule 3 (code_block -> code_block statement .)
    OTHERWISE       reduce using rule 3 (code_block -> code_block statement .)
    CASE            reduce using rule 3 (code_block -> code_block statement .)


state 29

    (2) code_block -> statement code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
  ! shift/reduce conflict for LCURL resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 2 (code_block -> statement code_block .)
    CATCH           reduce using rule 2 (code_block -> statement code_block .)
    END             reduce using rule 2 (code_block -> statement code_block .)
    ELSEIF          reduce using rule 2 (code_block -> statement code_block .)
    ELSE            reduce using rule 2 (code_block -> statement code_block .)
    OTHERWISE       reduce using rule 2 (code_block -> statement code_block .)
    CASE            reduce using rule 2 (code_block -> statement code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 30

    (5) statement -> expr NEWLINE .
    COMMAND         reduce using rule 5 (statement -> expr NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> expr NEWLINE .)
    SEMICOLON       reduce using rule 5 (statement -> expr NEWLINE .)
    TRY             reduce using rule 5 (statement -> expr NEWLINE .)
    WHILE           reduce using rule 5 (statement -> expr NEWLINE .)
    BREAK           reduce using rule 5 (statement -> expr NEWLINE .)
    CONTINUE        reduce using rule 5 (statement -> expr NEWLINE .)
    FOR             reduce using rule 5 (statement -> expr NEWLINE .)
    RETURN          reduce using rule 5 (statement -> expr NEWLINE .)
    FUNCTION        reduce using rule 5 (statement -> expr NEWLINE .)
    STRING          reduce using rule 5 (statement -> expr NEWLINE .)
    NUMBER          reduce using rule 5 (statement -> expr NEWLINE .)
    NAME            reduce using rule 5 (statement -> expr NEWLINE .)
    NOT             reduce using rule 5 (statement -> expr NEWLINE .)
    MINUS           reduce using rule 5 (statement -> expr NEWLINE .)
    PLUS            reduce using rule 5 (statement -> expr NEWLINE .)
    AT              reduce using rule 5 (statement -> expr NEWLINE .)
    LPAREN          reduce using rule 5 (statement -> expr NEWLINE .)
    LSQR            reduce using rule 5 (statement -> expr NEWLINE .)
    LCURL           reduce using rule 5 (statement -> expr NEWLINE .)
    SWITCH          reduce using rule 5 (statement -> expr NEWLINE .)
    IF              reduce using rule 5 (statement -> expr NEWLINE .)
    $end            reduce using rule 5 (statement -> expr NEWLINE .)
    CATCH           reduce using rule 5 (statement -> expr NEWLINE .)
    END             reduce using rule 5 (statement -> expr NEWLINE .)
    ELSEIF          reduce using rule 5 (statement -> expr NEWLINE .)
    ELSE            reduce using rule 5 (statement -> expr NEWLINE .)
    OTHERWISE       reduce using rule 5 (statement -> expr NEWLINE .)
    CASE            reduce using rule 5 (statement -> expr NEWLINE .)


state 31

    (6) statement -> expr SEMICOLON .
    COMMAND         reduce using rule 6 (statement -> expr SEMICOLON .)
    NEWLINE         reduce using rule 6 (statement -> expr SEMICOLON .)
    SEMICOLON       reduce using rule 6 (statement -> expr SEMICOLON .)
    TRY             reduce using rule 6 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 6 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 6 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 6 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> expr SEMICOLON .)
    FUNCTION        reduce using rule 6 (statement -> expr SEMICOLON .)
    STRING          reduce using rule 6 (statement -> expr SEMICOLON .)
    NUMBER          reduce using rule 6 (statement -> expr SEMICOLON .)
    NAME            reduce using rule 6 (statement -> expr SEMICOLON .)
    NOT             reduce using rule 6 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> expr SEMICOLON .)
    AT              reduce using rule 6 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 6 (statement -> expr SEMICOLON .)
    LSQR            reduce using rule 6 (statement -> expr SEMICOLON .)
    LCURL           reduce using rule 6 (statement -> expr SEMICOLON .)
    SWITCH          reduce using rule 6 (statement -> expr SEMICOLON .)
    IF              reduce using rule 6 (statement -> expr SEMICOLON .)
    $end            reduce using rule 6 (statement -> expr SEMICOLON .)
    CATCH           reduce using rule 6 (statement -> expr SEMICOLON .)
    END             reduce using rule 6 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 6 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> expr SEMICOLON .)
    OTHERWISE       reduce using rule 6 (statement -> expr SEMICOLON .)
    CASE            reduce using rule 6 (statement -> expr SEMICOLON .)


state 32

    (36) expr -> expr CTRANSPOSE .
    NEWLINE         reduce using rule 36 (expr -> expr CTRANSPOSE .)
    SEMICOLON       reduce using rule 36 (expr -> expr CTRANSPOSE .)
    CTRANSPOSE      reduce using rule 36 (expr -> expr CTRANSPOSE .)
    TRANSPOSE       reduce using rule 36 (expr -> expr CTRANSPOSE .)
    MPOWER          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    POWER           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LDIVIDE         reduce using rule 36 (expr -> expr CTRANSPOSE .)
    RDIVIDE         reduce using rule 36 (expr -> expr CTRANSPOSE .)
    TIMES           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    MLDIVIDE        reduce using rule 36 (expr -> expr CTRANSPOSE .)
    MRDIVIDE        reduce using rule 36 (expr -> expr CTRANSPOSE .)
    MTIMES          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    MINUS           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    PLUS            reduce using rule 36 (expr -> expr CTRANSPOSE .)
    NE              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    EQ              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    GE              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    GT              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LE              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LT              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    AND             reduce using rule 36 (expr -> expr CTRANSPOSE .)
    OR              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    ANDAND          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    OROR            reduce using rule 36 (expr -> expr CTRANSPOSE .)
    COLON           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    DOT             reduce using rule 36 (expr -> expr CTRANSPOSE .)
    ELLIPSIS        reduce using rule 36 (expr -> expr CTRANSPOSE .)
    ASSIGN          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LCURL           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LPAREN          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    RPAREN          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    RSQR            reduce using rule 36 (expr -> expr CTRANSPOSE .)
    COMMA           reduce using rule 36 (expr -> expr CTRANSPOSE .)
    STRING          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    NUMBER          reduce using rule 36 (expr -> expr CTRANSPOSE .)
    NAME            reduce using rule 36 (expr -> expr CTRANSPOSE .)
    NOT             reduce using rule 36 (expr -> expr CTRANSPOSE .)
    AT              reduce using rule 36 (expr -> expr CTRANSPOSE .)
    LSQR            reduce using rule 36 (expr -> expr CTRANSPOSE .)
    RCURL           reduce using rule 36 (expr -> expr CTRANSPOSE .)


state 33

    (37) expr -> expr TRANSPOSE .
    NEWLINE         reduce using rule 37 (expr -> expr TRANSPOSE .)
    SEMICOLON       reduce using rule 37 (expr -> expr TRANSPOSE .)
    CTRANSPOSE      reduce using rule 37 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 37 (expr -> expr TRANSPOSE .)
    MPOWER          reduce using rule 37 (expr -> expr TRANSPOSE .)
    POWER           reduce using rule 37 (expr -> expr TRANSPOSE .)
    LDIVIDE         reduce using rule 37 (expr -> expr TRANSPOSE .)
    RDIVIDE         reduce using rule 37 (expr -> expr TRANSPOSE .)
    TIMES           reduce using rule 37 (expr -> expr TRANSPOSE .)
    MLDIVIDE        reduce using rule 37 (expr -> expr TRANSPOSE .)
    MRDIVIDE        reduce using rule 37 (expr -> expr TRANSPOSE .)
    MTIMES          reduce using rule 37 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 37 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 37 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 37 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 37 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 37 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 37 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 37 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 37 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 37 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 37 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 37 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 37 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 37 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 37 (expr -> expr TRANSPOSE .)
    ELLIPSIS        reduce using rule 37 (expr -> expr TRANSPOSE .)
    ASSIGN          reduce using rule 37 (expr -> expr TRANSPOSE .)
    LCURL           reduce using rule 37 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 37 (expr -> expr TRANSPOSE .)
    RPAREN          reduce using rule 37 (expr -> expr TRANSPOSE .)
    RSQR            reduce using rule 37 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 37 (expr -> expr TRANSPOSE .)
    STRING          reduce using rule 37 (expr -> expr TRANSPOSE .)
    NUMBER          reduce using rule 37 (expr -> expr TRANSPOSE .)
    NAME            reduce using rule 37 (expr -> expr TRANSPOSE .)
    NOT             reduce using rule 37 (expr -> expr TRANSPOSE .)
    AT              reduce using rule 37 (expr -> expr TRANSPOSE .)
    LSQR            reduce using rule 37 (expr -> expr TRANSPOSE .)
    RCURL           reduce using rule 37 (expr -> expr TRANSPOSE .)


state 34

    (38) expr -> expr MPOWER . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 87

state 35

    (39) expr -> expr POWER . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 88

state 36

    (40) expr -> expr LDIVIDE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 89

state 37

    (41) expr -> expr RDIVIDE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 90

state 38

    (42) expr -> expr TIMES . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 91

state 39

    (43) expr -> expr MLDIVIDE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 92

state 40

    (44) expr -> expr MRDIVIDE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 93

state 41

    (45) expr -> expr MTIMES . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 94

state 42

    (46) expr -> expr MINUS . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 95

state 43

    (47) expr -> expr PLUS . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 96

state 44

    (48) expr -> expr NE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 97

state 45

    (49) expr -> expr EQ . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 98

state 46

    (50) expr -> expr GE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 99

state 47

    (51) expr -> expr GT . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 100

state 48

    (52) expr -> expr LE . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 101

state 49

    (53) expr -> expr LT . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 102

state 50

    (54) expr -> expr AND . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 103

state 51

    (55) expr -> expr OR . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 104

state 52

    (56) expr -> expr ANDAND . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 105

state 53

    (57) expr -> expr OROR . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 106

state 54

    (58) expr -> expr COLON . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 107

state 55

    (63) expr -> expr DOT . NAME
    NAME            shift and go to state 108


state 56

    (64) expr -> expr ELLIPSIS . NEWLINE
    NEWLINE         shift and go to state 109


state 57

    (66) expr -> expr ASSIGN . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 110

state 58

    (73) expr -> expr LCURL . args RCURL
    (75) args -> . expr
    (76) args -> . expr COMMA expr
    (77) args -> . args COMMA expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 111
    args                           shift and go to state 112

state 59

    (74) expr -> expr LPAREN . args RPAREN
    (75) args -> . expr
    (76) args -> . expr COMMA expr
    (77) args -> . args COMMA expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 111
    args                           shift and go to state 113

state 60

    (9) statement -> switch_block OTHERWISE . NEWLINE code_block END SEMICOLON
    (10) statement -> switch_block OTHERWISE . SEMICOLON code_block END SEMICOLON
    (11) statement -> switch_block OTHERWISE . NEWLINE code_block END NEWLINE
    (12) statement -> switch_block OTHERWISE . SEMICOLON code_block END NEWLINE
    NEWLINE         shift and go to state 114
    SEMICOLON       shift and go to state 115


state 61

    (13) statement -> switch_block END . NEWLINE
    NEWLINE         shift and go to state 116


state 62

    (32) switch_block -> switch_block CASE . statement code_block
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    statement                      shift and go to state 117
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 63

    (14) statement -> TRY code_block . CATCH statement code_block END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    CATCH           shift and go to state 118
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 64

    (15) statement -> WHILE statement . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 119
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 65

    (16) statement -> if_block END . SEMICOLON
    (17) statement -> if_block END . NEWLINE
    SEMICOLON       shift and go to state 120
    NEWLINE         shift and go to state 121


state 66

    (28) if_block -> if_block ELSEIF . statement code_block
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    statement                      shift and go to state 122
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 67

    (29) if_block -> if_block ELSE . SEMICOLON code_block
    (30) if_block -> if_block ELSE . NEWLINE code_block
    SEMICOLON       shift and go to state 123
    NEWLINE         shift and go to state 124


state 68

    (18) statement -> BREAK SEMICOLON .
    COMMAND         reduce using rule 18 (statement -> BREAK SEMICOLON .)
    NEWLINE         reduce using rule 18 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 18 (statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 18 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 18 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 18 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 18 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 18 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    NAME            reduce using rule 18 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 18 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 18 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 18 (statement -> BREAK SEMICOLON .)
    AT              reduce using rule 18 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    LSQR            reduce using rule 18 (statement -> BREAK SEMICOLON .)
    LCURL           reduce using rule 18 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 18 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 18 (statement -> BREAK SEMICOLON .)
    CATCH           reduce using rule 18 (statement -> BREAK SEMICOLON .)
    END             reduce using rule 18 (statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 18 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> BREAK SEMICOLON .)
    OTHERWISE       reduce using rule 18 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 18 (statement -> BREAK SEMICOLON .)


state 69

    (20) statement -> BREAK NEWLINE .
    COMMAND         reduce using rule 20 (statement -> BREAK NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> BREAK NEWLINE .)
    SEMICOLON       reduce using rule 20 (statement -> BREAK NEWLINE .)
    TRY             reduce using rule 20 (statement -> BREAK NEWLINE .)
    WHILE           reduce using rule 20 (statement -> BREAK NEWLINE .)
    BREAK           reduce using rule 20 (statement -> BREAK NEWLINE .)
    CONTINUE        reduce using rule 20 (statement -> BREAK NEWLINE .)
    FOR             reduce using rule 20 (statement -> BREAK NEWLINE .)
    RETURN          reduce using rule 20 (statement -> BREAK NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> BREAK NEWLINE .)
    STRING          reduce using rule 20 (statement -> BREAK NEWLINE .)
    NUMBER          reduce using rule 20 (statement -> BREAK NEWLINE .)
    NAME            reduce using rule 20 (statement -> BREAK NEWLINE .)
    NOT             reduce using rule 20 (statement -> BREAK NEWLINE .)
    MINUS           reduce using rule 20 (statement -> BREAK NEWLINE .)
    PLUS            reduce using rule 20 (statement -> BREAK NEWLINE .)
    AT              reduce using rule 20 (statement -> BREAK NEWLINE .)
    LPAREN          reduce using rule 20 (statement -> BREAK NEWLINE .)
    LSQR            reduce using rule 20 (statement -> BREAK NEWLINE .)
    LCURL           reduce using rule 20 (statement -> BREAK NEWLINE .)
    SWITCH          reduce using rule 20 (statement -> BREAK NEWLINE .)
    IF              reduce using rule 20 (statement -> BREAK NEWLINE .)
    $end            reduce using rule 20 (statement -> BREAK NEWLINE .)
    CATCH           reduce using rule 20 (statement -> BREAK NEWLINE .)
    END             reduce using rule 20 (statement -> BREAK NEWLINE .)
    ELSEIF          reduce using rule 20 (statement -> BREAK NEWLINE .)
    ELSE            reduce using rule 20 (statement -> BREAK NEWLINE .)
    OTHERWISE       reduce using rule 20 (statement -> BREAK NEWLINE .)
    CASE            reduce using rule 20 (statement -> BREAK NEWLINE .)


state 70

    (19) statement -> CONTINUE SEMICOLON .
    COMMAND         reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    NEWLINE         reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    NAME            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    AT              reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    LSQR            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    LCURL           reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    CATCH           reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    END             reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    OTHERWISE       reduce using rule 19 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 19 (statement -> CONTINUE SEMICOLON .)


state 71

    (21) statement -> CONTINUE NEWLINE .
    COMMAND         reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    SEMICOLON       reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    TRY             reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    WHILE           reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    BREAK           reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    CONTINUE        reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    FOR             reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    RETURN          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    STRING          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    NUMBER          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    NAME            reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    NOT             reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    MINUS           reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    PLUS            reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    AT              reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    LPAREN          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    LSQR            reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    LCURL           reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    SWITCH          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    IF              reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    $end            reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    CATCH           reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    END             reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    ELSEIF          reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    ELSE            reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    OTHERWISE       reduce using rule 21 (statement -> CONTINUE NEWLINE .)
    CASE            reduce using rule 21 (statement -> CONTINUE NEWLINE .)


state 72

    (22) statement -> FOR statement . code_block END SEMICOLON
    (23) statement -> FOR statement . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 125
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 73

    (24) statement -> RETURN expr . SEMICOLON
    (25) statement -> RETURN expr . NEWLINE
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    SEMICOLON       shift and go to state 126
    NEWLINE         shift and go to state 127
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 74

    (26) statement -> FUNCTION statement . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 128
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 75

    (60) expr -> MINUS expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 60 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 60 (expr -> MINUS expr .)
    MINUS           reduce using rule 60 (expr -> MINUS expr .)
    PLUS            reduce using rule 60 (expr -> MINUS expr .)
    NE              reduce using rule 60 (expr -> MINUS expr .)
    EQ              reduce using rule 60 (expr -> MINUS expr .)
    GE              reduce using rule 60 (expr -> MINUS expr .)
    GT              reduce using rule 60 (expr -> MINUS expr .)
    LE              reduce using rule 60 (expr -> MINUS expr .)
    LT              reduce using rule 60 (expr -> MINUS expr .)
    AND             reduce using rule 60 (expr -> MINUS expr .)
    OR              reduce using rule 60 (expr -> MINUS expr .)
    ANDAND          reduce using rule 60 (expr -> MINUS expr .)
    OROR            reduce using rule 60 (expr -> MINUS expr .)
    COLON           reduce using rule 60 (expr -> MINUS expr .)
    ELLIPSIS        reduce using rule 60 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 60 (expr -> MINUS expr .)
    LCURL           reduce using rule 60 (expr -> MINUS expr .)
    LPAREN          reduce using rule 60 (expr -> MINUS expr .)
    RPAREN          reduce using rule 60 (expr -> MINUS expr .)
    RSQR            reduce using rule 60 (expr -> MINUS expr .)
    COMMA           reduce using rule 60 (expr -> MINUS expr .)
    STRING          reduce using rule 60 (expr -> MINUS expr .)
    NUMBER          reduce using rule 60 (expr -> MINUS expr .)
    NAME            reduce using rule 60 (expr -> MINUS expr .)
    NOT             reduce using rule 60 (expr -> MINUS expr .)
    AT              reduce using rule 60 (expr -> MINUS expr .)
    LSQR            reduce using rule 60 (expr -> MINUS expr .)
    RCURL           reduce using rule 60 (expr -> MINUS expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    DOT             shift and go to state 55


state 76

    (61) expr -> PLUS expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 61 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 61 (expr -> PLUS expr .)
    MINUS           reduce using rule 61 (expr -> PLUS expr .)
    PLUS            reduce using rule 61 (expr -> PLUS expr .)
    NE              reduce using rule 61 (expr -> PLUS expr .)
    EQ              reduce using rule 61 (expr -> PLUS expr .)
    GE              reduce using rule 61 (expr -> PLUS expr .)
    GT              reduce using rule 61 (expr -> PLUS expr .)
    LE              reduce using rule 61 (expr -> PLUS expr .)
    LT              reduce using rule 61 (expr -> PLUS expr .)
    AND             reduce using rule 61 (expr -> PLUS expr .)
    OR              reduce using rule 61 (expr -> PLUS expr .)
    ANDAND          reduce using rule 61 (expr -> PLUS expr .)
    OROR            reduce using rule 61 (expr -> PLUS expr .)
    COLON           reduce using rule 61 (expr -> PLUS expr .)
    ELLIPSIS        reduce using rule 61 (expr -> PLUS expr .)
    ASSIGN          reduce using rule 61 (expr -> PLUS expr .)
    LCURL           reduce using rule 61 (expr -> PLUS expr .)
    LPAREN          reduce using rule 61 (expr -> PLUS expr .)
    RPAREN          reduce using rule 61 (expr -> PLUS expr .)
    RSQR            reduce using rule 61 (expr -> PLUS expr .)
    COMMA           reduce using rule 61 (expr -> PLUS expr .)
    STRING          reduce using rule 61 (expr -> PLUS expr .)
    NUMBER          reduce using rule 61 (expr -> PLUS expr .)
    NAME            reduce using rule 61 (expr -> PLUS expr .)
    NOT             reduce using rule 61 (expr -> PLUS expr .)
    AT              reduce using rule 61 (expr -> PLUS expr .)
    LSQR            reduce using rule 61 (expr -> PLUS expr .)
    RCURL           reduce using rule 61 (expr -> PLUS expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    DOT             shift and go to state 55


state 77

    (59) expr -> NOT expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 59 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 59 (expr -> NOT expr .)
    LDIVIDE         reduce using rule 59 (expr -> NOT expr .)
    RDIVIDE         reduce using rule 59 (expr -> NOT expr .)
    TIMES           reduce using rule 59 (expr -> NOT expr .)
    MLDIVIDE        reduce using rule 59 (expr -> NOT expr .)
    MRDIVIDE        reduce using rule 59 (expr -> NOT expr .)
    MTIMES          reduce using rule 59 (expr -> NOT expr .)
    MINUS           reduce using rule 59 (expr -> NOT expr .)
    PLUS            reduce using rule 59 (expr -> NOT expr .)
    NE              reduce using rule 59 (expr -> NOT expr .)
    EQ              reduce using rule 59 (expr -> NOT expr .)
    GE              reduce using rule 59 (expr -> NOT expr .)
    GT              reduce using rule 59 (expr -> NOT expr .)
    LE              reduce using rule 59 (expr -> NOT expr .)
    LT              reduce using rule 59 (expr -> NOT expr .)
    AND             reduce using rule 59 (expr -> NOT expr .)
    OR              reduce using rule 59 (expr -> NOT expr .)
    ANDAND          reduce using rule 59 (expr -> NOT expr .)
    OROR            reduce using rule 59 (expr -> NOT expr .)
    COLON           reduce using rule 59 (expr -> NOT expr .)
    ELLIPSIS        reduce using rule 59 (expr -> NOT expr .)
    ASSIGN          reduce using rule 59 (expr -> NOT expr .)
    LCURL           reduce using rule 59 (expr -> NOT expr .)
    LPAREN          reduce using rule 59 (expr -> NOT expr .)
    RPAREN          reduce using rule 59 (expr -> NOT expr .)
    RSQR            reduce using rule 59 (expr -> NOT expr .)
    COMMA           reduce using rule 59 (expr -> NOT expr .)
    STRING          reduce using rule 59 (expr -> NOT expr .)
    NUMBER          reduce using rule 59 (expr -> NOT expr .)
    NAME            reduce using rule 59 (expr -> NOT expr .)
    NOT             reduce using rule 59 (expr -> NOT expr .)
    AT              reduce using rule 59 (expr -> NOT expr .)
    LSQR            reduce using rule 59 (expr -> NOT expr .)
    RCURL           reduce using rule 59 (expr -> NOT expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 78

    (62) expr -> AT LPAREN . args RPAREN expr
    (75) args -> . expr
    (76) args -> . expr COMMA expr
    (77) args -> . args COMMA expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    args                           shift and go to state 129
    expr                           shift and go to state 111

state 79

    (65) expr -> LPAREN expr . RPAREN
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    RPAREN          shift and go to state 130
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 80

    (67) expr -> LSQR matrx_rows . matrx_elements RSQR
    (69) expr -> LSQR matrx_rows . RSQR
    (79) matrx_rows -> matrx_rows . matrx_elements SEMICOLON
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RSQR            shift and go to state 132
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 131
    expr                           shift and go to state 82

state 81

    (68) expr -> LSQR matrx_elements . RSQR
    (78) matrx_rows -> matrx_elements . SEMICOLON
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RSQR            shift and go to state 134
    SEMICOLON       shift and go to state 135
    COMMA           shift and go to state 136
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 82

    (80) matrx_elements -> expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for LCURL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    RSQR            reduce using rule 80 (matrx_elements -> expr .)
    SEMICOLON       reduce using rule 80 (matrx_elements -> expr .)
    COMMA           reduce using rule 80 (matrx_elements -> expr .)
    STRING          reduce using rule 80 (matrx_elements -> expr .)
    NUMBER          reduce using rule 80 (matrx_elements -> expr .)
    NAME            reduce using rule 80 (matrx_elements -> expr .)
    NOT             reduce using rule 80 (matrx_elements -> expr .)
    AT              reduce using rule 80 (matrx_elements -> expr .)
    LSQR            reduce using rule 80 (matrx_elements -> expr .)
    RCURL           reduce using rule 80 (matrx_elements -> expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 83

    (70) expr -> LCURL matrx_rows . matrx_elements RCURL
    (72) expr -> LCURL matrx_rows . RCURL
    (79) matrx_rows -> matrx_rows . matrx_elements SEMICOLON
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RCURL           shift and go to state 138
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 137
    expr                           shift and go to state 82

state 84

    (71) expr -> LCURL matrx_elements . RCURL
    (78) matrx_rows -> matrx_elements . SEMICOLON
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RCURL           shift and go to state 139
    SEMICOLON       shift and go to state 135
    COMMA           shift and go to state 136
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 85

    (31) switch_block -> SWITCH statement . CASE statement code_block
    CASE            shift and go to state 140


state 86

    (27) if_block -> IF statement . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 141
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 87

    (38) expr -> expr MPOWER expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 38 (expr -> expr MPOWER expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr MPOWER expr .)
    CTRANSPOSE      reduce using rule 38 (expr -> expr MPOWER expr .)
    TRANSPOSE       reduce using rule 38 (expr -> expr MPOWER expr .)
    MPOWER          reduce using rule 38 (expr -> expr MPOWER expr .)
    POWER           reduce using rule 38 (expr -> expr MPOWER expr .)
    LDIVIDE         reduce using rule 38 (expr -> expr MPOWER expr .)
    RDIVIDE         reduce using rule 38 (expr -> expr MPOWER expr .)
    TIMES           reduce using rule 38 (expr -> expr MPOWER expr .)
    MLDIVIDE        reduce using rule 38 (expr -> expr MPOWER expr .)
    MRDIVIDE        reduce using rule 38 (expr -> expr MPOWER expr .)
    MTIMES          reduce using rule 38 (expr -> expr MPOWER expr .)
    MINUS           reduce using rule 38 (expr -> expr MPOWER expr .)
    PLUS            reduce using rule 38 (expr -> expr MPOWER expr .)
    NE              reduce using rule 38 (expr -> expr MPOWER expr .)
    EQ              reduce using rule 38 (expr -> expr MPOWER expr .)
    GE              reduce using rule 38 (expr -> expr MPOWER expr .)
    GT              reduce using rule 38 (expr -> expr MPOWER expr .)
    LE              reduce using rule 38 (expr -> expr MPOWER expr .)
    LT              reduce using rule 38 (expr -> expr MPOWER expr .)
    AND             reduce using rule 38 (expr -> expr MPOWER expr .)
    OR              reduce using rule 38 (expr -> expr MPOWER expr .)
    ANDAND          reduce using rule 38 (expr -> expr MPOWER expr .)
    OROR            reduce using rule 38 (expr -> expr MPOWER expr .)
    COLON           reduce using rule 38 (expr -> expr MPOWER expr .)
    ELLIPSIS        reduce using rule 38 (expr -> expr MPOWER expr .)
    ASSIGN          reduce using rule 38 (expr -> expr MPOWER expr .)
    LCURL           reduce using rule 38 (expr -> expr MPOWER expr .)
    LPAREN          reduce using rule 38 (expr -> expr MPOWER expr .)
    RPAREN          reduce using rule 38 (expr -> expr MPOWER expr .)
    RSQR            reduce using rule 38 (expr -> expr MPOWER expr .)
    COMMA           reduce using rule 38 (expr -> expr MPOWER expr .)
    STRING          reduce using rule 38 (expr -> expr MPOWER expr .)
    NUMBER          reduce using rule 38 (expr -> expr MPOWER expr .)
    NAME            reduce using rule 38 (expr -> expr MPOWER expr .)
    NOT             reduce using rule 38 (expr -> expr MPOWER expr .)
    AT              reduce using rule 38 (expr -> expr MPOWER expr .)
    LSQR            reduce using rule 38 (expr -> expr MPOWER expr .)
    RCURL           reduce using rule 38 (expr -> expr MPOWER expr .)
    DOT             shift and go to state 55


state 88

    (39) expr -> expr POWER expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 39 (expr -> expr POWER expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr POWER expr .)
    CTRANSPOSE      reduce using rule 39 (expr -> expr POWER expr .)
    TRANSPOSE       reduce using rule 39 (expr -> expr POWER expr .)
    MPOWER          reduce using rule 39 (expr -> expr POWER expr .)
    POWER           reduce using rule 39 (expr -> expr POWER expr .)
    LDIVIDE         reduce using rule 39 (expr -> expr POWER expr .)
    RDIVIDE         reduce using rule 39 (expr -> expr POWER expr .)
    TIMES           reduce using rule 39 (expr -> expr POWER expr .)
    MLDIVIDE        reduce using rule 39 (expr -> expr POWER expr .)
    MRDIVIDE        reduce using rule 39 (expr -> expr POWER expr .)
    MTIMES          reduce using rule 39 (expr -> expr POWER expr .)
    MINUS           reduce using rule 39 (expr -> expr POWER expr .)
    PLUS            reduce using rule 39 (expr -> expr POWER expr .)
    NE              reduce using rule 39 (expr -> expr POWER expr .)
    EQ              reduce using rule 39 (expr -> expr POWER expr .)
    GE              reduce using rule 39 (expr -> expr POWER expr .)
    GT              reduce using rule 39 (expr -> expr POWER expr .)
    LE              reduce using rule 39 (expr -> expr POWER expr .)
    LT              reduce using rule 39 (expr -> expr POWER expr .)
    AND             reduce using rule 39 (expr -> expr POWER expr .)
    OR              reduce using rule 39 (expr -> expr POWER expr .)
    ANDAND          reduce using rule 39 (expr -> expr POWER expr .)
    OROR            reduce using rule 39 (expr -> expr POWER expr .)
    COLON           reduce using rule 39 (expr -> expr POWER expr .)
    ELLIPSIS        reduce using rule 39 (expr -> expr POWER expr .)
    ASSIGN          reduce using rule 39 (expr -> expr POWER expr .)
    LCURL           reduce using rule 39 (expr -> expr POWER expr .)
    LPAREN          reduce using rule 39 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 39 (expr -> expr POWER expr .)
    RSQR            reduce using rule 39 (expr -> expr POWER expr .)
    COMMA           reduce using rule 39 (expr -> expr POWER expr .)
    STRING          reduce using rule 39 (expr -> expr POWER expr .)
    NUMBER          reduce using rule 39 (expr -> expr POWER expr .)
    NAME            reduce using rule 39 (expr -> expr POWER expr .)
    NOT             reduce using rule 39 (expr -> expr POWER expr .)
    AT              reduce using rule 39 (expr -> expr POWER expr .)
    LSQR            reduce using rule 39 (expr -> expr POWER expr .)
    RCURL           reduce using rule 39 (expr -> expr POWER expr .)
    DOT             shift and go to state 55


state 89

    (40) expr -> expr LDIVIDE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 40 (expr -> expr LDIVIDE expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LDIVIDE         reduce using rule 40 (expr -> expr LDIVIDE expr .)
    RDIVIDE         reduce using rule 40 (expr -> expr LDIVIDE expr .)
    TIMES           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    MLDIVIDE        reduce using rule 40 (expr -> expr LDIVIDE expr .)
    MRDIVIDE        reduce using rule 40 (expr -> expr LDIVIDE expr .)
    MTIMES          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    MINUS           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    PLUS            reduce using rule 40 (expr -> expr LDIVIDE expr .)
    NE              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    EQ              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    GE              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    GT              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LE              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LT              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    AND             reduce using rule 40 (expr -> expr LDIVIDE expr .)
    OR              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    ANDAND          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    OROR            reduce using rule 40 (expr -> expr LDIVIDE expr .)
    COLON           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    ELLIPSIS        reduce using rule 40 (expr -> expr LDIVIDE expr .)
    ASSIGN          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LCURL           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LPAREN          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    RPAREN          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    RSQR            reduce using rule 40 (expr -> expr LDIVIDE expr .)
    COMMA           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    STRING          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    NUMBER          reduce using rule 40 (expr -> expr LDIVIDE expr .)
    NAME            reduce using rule 40 (expr -> expr LDIVIDE expr .)
    NOT             reduce using rule 40 (expr -> expr LDIVIDE expr .)
    AT              reduce using rule 40 (expr -> expr LDIVIDE expr .)
    LSQR            reduce using rule 40 (expr -> expr LDIVIDE expr .)
    RCURL           reduce using rule 40 (expr -> expr LDIVIDE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 90

    (41) expr -> expr RDIVIDE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 41 (expr -> expr RDIVIDE expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LDIVIDE         reduce using rule 41 (expr -> expr RDIVIDE expr .)
    RDIVIDE         reduce using rule 41 (expr -> expr RDIVIDE expr .)
    TIMES           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    MLDIVIDE        reduce using rule 41 (expr -> expr RDIVIDE expr .)
    MRDIVIDE        reduce using rule 41 (expr -> expr RDIVIDE expr .)
    MTIMES          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    MINUS           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    PLUS            reduce using rule 41 (expr -> expr RDIVIDE expr .)
    NE              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    EQ              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    GE              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    GT              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LE              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LT              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    AND             reduce using rule 41 (expr -> expr RDIVIDE expr .)
    OR              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    ANDAND          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    OROR            reduce using rule 41 (expr -> expr RDIVIDE expr .)
    COLON           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    ELLIPSIS        reduce using rule 41 (expr -> expr RDIVIDE expr .)
    ASSIGN          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LCURL           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LPAREN          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    RPAREN          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    RSQR            reduce using rule 41 (expr -> expr RDIVIDE expr .)
    COMMA           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    STRING          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    NUMBER          reduce using rule 41 (expr -> expr RDIVIDE expr .)
    NAME            reduce using rule 41 (expr -> expr RDIVIDE expr .)
    NOT             reduce using rule 41 (expr -> expr RDIVIDE expr .)
    AT              reduce using rule 41 (expr -> expr RDIVIDE expr .)
    LSQR            reduce using rule 41 (expr -> expr RDIVIDE expr .)
    RCURL           reduce using rule 41 (expr -> expr RDIVIDE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 91

    (42) expr -> expr TIMES expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 42 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr TIMES expr .)
    LDIVIDE         reduce using rule 42 (expr -> expr TIMES expr .)
    RDIVIDE         reduce using rule 42 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 42 (expr -> expr TIMES expr .)
    MLDIVIDE        reduce using rule 42 (expr -> expr TIMES expr .)
    MRDIVIDE        reduce using rule 42 (expr -> expr TIMES expr .)
    MTIMES          reduce using rule 42 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 42 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 42 (expr -> expr TIMES expr .)
    NE              reduce using rule 42 (expr -> expr TIMES expr .)
    EQ              reduce using rule 42 (expr -> expr TIMES expr .)
    GE              reduce using rule 42 (expr -> expr TIMES expr .)
    GT              reduce using rule 42 (expr -> expr TIMES expr .)
    LE              reduce using rule 42 (expr -> expr TIMES expr .)
    LT              reduce using rule 42 (expr -> expr TIMES expr .)
    AND             reduce using rule 42 (expr -> expr TIMES expr .)
    OR              reduce using rule 42 (expr -> expr TIMES expr .)
    ANDAND          reduce using rule 42 (expr -> expr TIMES expr .)
    OROR            reduce using rule 42 (expr -> expr TIMES expr .)
    COLON           reduce using rule 42 (expr -> expr TIMES expr .)
    ELLIPSIS        reduce using rule 42 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 42 (expr -> expr TIMES expr .)
    LCURL           reduce using rule 42 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 42 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 42 (expr -> expr TIMES expr .)
    RSQR            reduce using rule 42 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 42 (expr -> expr TIMES expr .)
    STRING          reduce using rule 42 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 42 (expr -> expr TIMES expr .)
    NAME            reduce using rule 42 (expr -> expr TIMES expr .)
    NOT             reduce using rule 42 (expr -> expr TIMES expr .)
    AT              reduce using rule 42 (expr -> expr TIMES expr .)
    LSQR            reduce using rule 42 (expr -> expr TIMES expr .)
    RCURL           reduce using rule 42 (expr -> expr TIMES expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 92

    (43) expr -> expr MLDIVIDE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LDIVIDE         reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    RDIVIDE         reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    TIMES           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    MLDIVIDE        reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    MRDIVIDE        reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    MTIMES          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    MINUS           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    PLUS            reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    NE              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    EQ              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    GE              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    GT              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LE              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LT              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    AND             reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    OR              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    ANDAND          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    OROR            reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    COLON           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    ELLIPSIS        reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    ASSIGN          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LCURL           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LPAREN          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    RPAREN          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    RSQR            reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    COMMA           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    STRING          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    NUMBER          reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    NAME            reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    NOT             reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    AT              reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    LSQR            reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    RCURL           reduce using rule 43 (expr -> expr MLDIVIDE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 93

    (44) expr -> expr MRDIVIDE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    SEMICOLON       reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LDIVIDE         reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    RDIVIDE         reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    TIMES           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    MLDIVIDE        reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    MRDIVIDE        reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    MTIMES          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    MINUS           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    PLUS            reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    NE              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    EQ              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    GE              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    GT              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LE              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LT              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    AND             reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    OR              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    ANDAND          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    OROR            reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    COLON           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    ELLIPSIS        reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    ASSIGN          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LCURL           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LPAREN          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    RPAREN          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    RSQR            reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    COMMA           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    STRING          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    NUMBER          reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    NAME            reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    NOT             reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    AT              reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    LSQR            reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    RCURL           reduce using rule 44 (expr -> expr MRDIVIDE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 94

    (45) expr -> expr MTIMES expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 45 (expr -> expr MTIMES expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr MTIMES expr .)
    LDIVIDE         reduce using rule 45 (expr -> expr MTIMES expr .)
    RDIVIDE         reduce using rule 45 (expr -> expr MTIMES expr .)
    TIMES           reduce using rule 45 (expr -> expr MTIMES expr .)
    MLDIVIDE        reduce using rule 45 (expr -> expr MTIMES expr .)
    MRDIVIDE        reduce using rule 45 (expr -> expr MTIMES expr .)
    MTIMES          reduce using rule 45 (expr -> expr MTIMES expr .)
    MINUS           reduce using rule 45 (expr -> expr MTIMES expr .)
    PLUS            reduce using rule 45 (expr -> expr MTIMES expr .)
    NE              reduce using rule 45 (expr -> expr MTIMES expr .)
    EQ              reduce using rule 45 (expr -> expr MTIMES expr .)
    GE              reduce using rule 45 (expr -> expr MTIMES expr .)
    GT              reduce using rule 45 (expr -> expr MTIMES expr .)
    LE              reduce using rule 45 (expr -> expr MTIMES expr .)
    LT              reduce using rule 45 (expr -> expr MTIMES expr .)
    AND             reduce using rule 45 (expr -> expr MTIMES expr .)
    OR              reduce using rule 45 (expr -> expr MTIMES expr .)
    ANDAND          reduce using rule 45 (expr -> expr MTIMES expr .)
    OROR            reduce using rule 45 (expr -> expr MTIMES expr .)
    COLON           reduce using rule 45 (expr -> expr MTIMES expr .)
    ELLIPSIS        reduce using rule 45 (expr -> expr MTIMES expr .)
    ASSIGN          reduce using rule 45 (expr -> expr MTIMES expr .)
    LCURL           reduce using rule 45 (expr -> expr MTIMES expr .)
    LPAREN          reduce using rule 45 (expr -> expr MTIMES expr .)
    RPAREN          reduce using rule 45 (expr -> expr MTIMES expr .)
    RSQR            reduce using rule 45 (expr -> expr MTIMES expr .)
    COMMA           reduce using rule 45 (expr -> expr MTIMES expr .)
    STRING          reduce using rule 45 (expr -> expr MTIMES expr .)
    NUMBER          reduce using rule 45 (expr -> expr MTIMES expr .)
    NAME            reduce using rule 45 (expr -> expr MTIMES expr .)
    NOT             reduce using rule 45 (expr -> expr MTIMES expr .)
    AT              reduce using rule 45 (expr -> expr MTIMES expr .)
    LSQR            reduce using rule 45 (expr -> expr MTIMES expr .)
    RCURL           reduce using rule 45 (expr -> expr MTIMES expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    DOT             shift and go to state 55


state 95

    (46) expr -> expr MINUS expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 46 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 46 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 46 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 46 (expr -> expr MINUS expr .)
    NE              reduce using rule 46 (expr -> expr MINUS expr .)
    EQ              reduce using rule 46 (expr -> expr MINUS expr .)
    GE              reduce using rule 46 (expr -> expr MINUS expr .)
    GT              reduce using rule 46 (expr -> expr MINUS expr .)
    LE              reduce using rule 46 (expr -> expr MINUS expr .)
    LT              reduce using rule 46 (expr -> expr MINUS expr .)
    AND             reduce using rule 46 (expr -> expr MINUS expr .)
    OR              reduce using rule 46 (expr -> expr MINUS expr .)
    ANDAND          reduce using rule 46 (expr -> expr MINUS expr .)
    OROR            reduce using rule 46 (expr -> expr MINUS expr .)
    COLON           reduce using rule 46 (expr -> expr MINUS expr .)
    ELLIPSIS        reduce using rule 46 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 46 (expr -> expr MINUS expr .)
    LCURL           reduce using rule 46 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 46 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 46 (expr -> expr MINUS expr .)
    RSQR            reduce using rule 46 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 46 (expr -> expr MINUS expr .)
    STRING          reduce using rule 46 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 46 (expr -> expr MINUS expr .)
    NAME            reduce using rule 46 (expr -> expr MINUS expr .)
    NOT             reduce using rule 46 (expr -> expr MINUS expr .)
    AT              reduce using rule 46 (expr -> expr MINUS expr .)
    LSQR            reduce using rule 46 (expr -> expr MINUS expr .)
    RCURL           reduce using rule 46 (expr -> expr MINUS expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    DOT             shift and go to state 55


state 96

    (47) expr -> expr PLUS expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 47 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 47 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 47 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 47 (expr -> expr PLUS expr .)
    NE              reduce using rule 47 (expr -> expr PLUS expr .)
    EQ              reduce using rule 47 (expr -> expr PLUS expr .)
    GE              reduce using rule 47 (expr -> expr PLUS expr .)
    GT              reduce using rule 47 (expr -> expr PLUS expr .)
    LE              reduce using rule 47 (expr -> expr PLUS expr .)
    LT              reduce using rule 47 (expr -> expr PLUS expr .)
    AND             reduce using rule 47 (expr -> expr PLUS expr .)
    OR              reduce using rule 47 (expr -> expr PLUS expr .)
    ANDAND          reduce using rule 47 (expr -> expr PLUS expr .)
    OROR            reduce using rule 47 (expr -> expr PLUS expr .)
    COLON           reduce using rule 47 (expr -> expr PLUS expr .)
    ELLIPSIS        reduce using rule 47 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 47 (expr -> expr PLUS expr .)
    LCURL           reduce using rule 47 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 47 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr PLUS expr .)
    RSQR            reduce using rule 47 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 47 (expr -> expr PLUS expr .)
    STRING          reduce using rule 47 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 47 (expr -> expr PLUS expr .)
    NAME            reduce using rule 47 (expr -> expr PLUS expr .)
    NOT             reduce using rule 47 (expr -> expr PLUS expr .)
    AT              reduce using rule 47 (expr -> expr PLUS expr .)
    LSQR            reduce using rule 47 (expr -> expr PLUS expr .)
    RCURL           reduce using rule 47 (expr -> expr PLUS expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    DOT             shift and go to state 55


state 97

    (48) expr -> expr NE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 48 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr NE expr .)
    NE              reduce using rule 48 (expr -> expr NE expr .)
    EQ              reduce using rule 48 (expr -> expr NE expr .)
    GE              reduce using rule 48 (expr -> expr NE expr .)
    GT              reduce using rule 48 (expr -> expr NE expr .)
    LE              reduce using rule 48 (expr -> expr NE expr .)
    LT              reduce using rule 48 (expr -> expr NE expr .)
    AND             reduce using rule 48 (expr -> expr NE expr .)
    OR              reduce using rule 48 (expr -> expr NE expr .)
    ANDAND          reduce using rule 48 (expr -> expr NE expr .)
    OROR            reduce using rule 48 (expr -> expr NE expr .)
    ELLIPSIS        reduce using rule 48 (expr -> expr NE expr .)
    ASSIGN          reduce using rule 48 (expr -> expr NE expr .)
    LCURL           reduce using rule 48 (expr -> expr NE expr .)
    LPAREN          reduce using rule 48 (expr -> expr NE expr .)
    RPAREN          reduce using rule 48 (expr -> expr NE expr .)
    RSQR            reduce using rule 48 (expr -> expr NE expr .)
    COMMA           reduce using rule 48 (expr -> expr NE expr .)
    STRING          reduce using rule 48 (expr -> expr NE expr .)
    NUMBER          reduce using rule 48 (expr -> expr NE expr .)
    NAME            reduce using rule 48 (expr -> expr NE expr .)
    NOT             reduce using rule 48 (expr -> expr NE expr .)
    AT              reduce using rule 48 (expr -> expr NE expr .)
    LSQR            reduce using rule 48 (expr -> expr NE expr .)
    RCURL           reduce using rule 48 (expr -> expr NE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 98

    (49) expr -> expr EQ expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 49 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr EQ expr .)
    NE              reduce using rule 49 (expr -> expr EQ expr .)
    EQ              reduce using rule 49 (expr -> expr EQ expr .)
    GE              reduce using rule 49 (expr -> expr EQ expr .)
    GT              reduce using rule 49 (expr -> expr EQ expr .)
    LE              reduce using rule 49 (expr -> expr EQ expr .)
    LT              reduce using rule 49 (expr -> expr EQ expr .)
    AND             reduce using rule 49 (expr -> expr EQ expr .)
    OR              reduce using rule 49 (expr -> expr EQ expr .)
    ANDAND          reduce using rule 49 (expr -> expr EQ expr .)
    OROR            reduce using rule 49 (expr -> expr EQ expr .)
    ELLIPSIS        reduce using rule 49 (expr -> expr EQ expr .)
    ASSIGN          reduce using rule 49 (expr -> expr EQ expr .)
    LCURL           reduce using rule 49 (expr -> expr EQ expr .)
    LPAREN          reduce using rule 49 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 49 (expr -> expr EQ expr .)
    RSQR            reduce using rule 49 (expr -> expr EQ expr .)
    COMMA           reduce using rule 49 (expr -> expr EQ expr .)
    STRING          reduce using rule 49 (expr -> expr EQ expr .)
    NUMBER          reduce using rule 49 (expr -> expr EQ expr .)
    NAME            reduce using rule 49 (expr -> expr EQ expr .)
    NOT             reduce using rule 49 (expr -> expr EQ expr .)
    AT              reduce using rule 49 (expr -> expr EQ expr .)
    LSQR            reduce using rule 49 (expr -> expr EQ expr .)
    RCURL           reduce using rule 49 (expr -> expr EQ expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 99

    (50) expr -> expr GE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 50 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 50 (expr -> expr GE expr .)
    NE              reduce using rule 50 (expr -> expr GE expr .)
    EQ              reduce using rule 50 (expr -> expr GE expr .)
    GE              reduce using rule 50 (expr -> expr GE expr .)
    GT              reduce using rule 50 (expr -> expr GE expr .)
    LE              reduce using rule 50 (expr -> expr GE expr .)
    LT              reduce using rule 50 (expr -> expr GE expr .)
    AND             reduce using rule 50 (expr -> expr GE expr .)
    OR              reduce using rule 50 (expr -> expr GE expr .)
    ANDAND          reduce using rule 50 (expr -> expr GE expr .)
    OROR            reduce using rule 50 (expr -> expr GE expr .)
    ELLIPSIS        reduce using rule 50 (expr -> expr GE expr .)
    ASSIGN          reduce using rule 50 (expr -> expr GE expr .)
    LCURL           reduce using rule 50 (expr -> expr GE expr .)
    LPAREN          reduce using rule 50 (expr -> expr GE expr .)
    RPAREN          reduce using rule 50 (expr -> expr GE expr .)
    RSQR            reduce using rule 50 (expr -> expr GE expr .)
    COMMA           reduce using rule 50 (expr -> expr GE expr .)
    STRING          reduce using rule 50 (expr -> expr GE expr .)
    NUMBER          reduce using rule 50 (expr -> expr GE expr .)
    NAME            reduce using rule 50 (expr -> expr GE expr .)
    NOT             reduce using rule 50 (expr -> expr GE expr .)
    AT              reduce using rule 50 (expr -> expr GE expr .)
    LSQR            reduce using rule 50 (expr -> expr GE expr .)
    RCURL           reduce using rule 50 (expr -> expr GE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 100

    (51) expr -> expr GT expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 51 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 51 (expr -> expr GT expr .)
    NE              reduce using rule 51 (expr -> expr GT expr .)
    EQ              reduce using rule 51 (expr -> expr GT expr .)
    GE              reduce using rule 51 (expr -> expr GT expr .)
    GT              reduce using rule 51 (expr -> expr GT expr .)
    LE              reduce using rule 51 (expr -> expr GT expr .)
    LT              reduce using rule 51 (expr -> expr GT expr .)
    AND             reduce using rule 51 (expr -> expr GT expr .)
    OR              reduce using rule 51 (expr -> expr GT expr .)
    ANDAND          reduce using rule 51 (expr -> expr GT expr .)
    OROR            reduce using rule 51 (expr -> expr GT expr .)
    ELLIPSIS        reduce using rule 51 (expr -> expr GT expr .)
    ASSIGN          reduce using rule 51 (expr -> expr GT expr .)
    LCURL           reduce using rule 51 (expr -> expr GT expr .)
    LPAREN          reduce using rule 51 (expr -> expr GT expr .)
    RPAREN          reduce using rule 51 (expr -> expr GT expr .)
    RSQR            reduce using rule 51 (expr -> expr GT expr .)
    COMMA           reduce using rule 51 (expr -> expr GT expr .)
    STRING          reduce using rule 51 (expr -> expr GT expr .)
    NUMBER          reduce using rule 51 (expr -> expr GT expr .)
    NAME            reduce using rule 51 (expr -> expr GT expr .)
    NOT             reduce using rule 51 (expr -> expr GT expr .)
    AT              reduce using rule 51 (expr -> expr GT expr .)
    LSQR            reduce using rule 51 (expr -> expr GT expr .)
    RCURL           reduce using rule 51 (expr -> expr GT expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 101

    (52) expr -> expr LE expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 52 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 52 (expr -> expr LE expr .)
    NE              reduce using rule 52 (expr -> expr LE expr .)
    EQ              reduce using rule 52 (expr -> expr LE expr .)
    GE              reduce using rule 52 (expr -> expr LE expr .)
    GT              reduce using rule 52 (expr -> expr LE expr .)
    LE              reduce using rule 52 (expr -> expr LE expr .)
    LT              reduce using rule 52 (expr -> expr LE expr .)
    AND             reduce using rule 52 (expr -> expr LE expr .)
    OR              reduce using rule 52 (expr -> expr LE expr .)
    ANDAND          reduce using rule 52 (expr -> expr LE expr .)
    OROR            reduce using rule 52 (expr -> expr LE expr .)
    ELLIPSIS        reduce using rule 52 (expr -> expr LE expr .)
    ASSIGN          reduce using rule 52 (expr -> expr LE expr .)
    LCURL           reduce using rule 52 (expr -> expr LE expr .)
    LPAREN          reduce using rule 52 (expr -> expr LE expr .)
    RPAREN          reduce using rule 52 (expr -> expr LE expr .)
    RSQR            reduce using rule 52 (expr -> expr LE expr .)
    COMMA           reduce using rule 52 (expr -> expr LE expr .)
    STRING          reduce using rule 52 (expr -> expr LE expr .)
    NUMBER          reduce using rule 52 (expr -> expr LE expr .)
    NAME            reduce using rule 52 (expr -> expr LE expr .)
    NOT             reduce using rule 52 (expr -> expr LE expr .)
    AT              reduce using rule 52 (expr -> expr LE expr .)
    LSQR            reduce using rule 52 (expr -> expr LE expr .)
    RCURL           reduce using rule 52 (expr -> expr LE expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 102

    (53) expr -> expr LT expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 53 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr LT expr .)
    NE              reduce using rule 53 (expr -> expr LT expr .)
    EQ              reduce using rule 53 (expr -> expr LT expr .)
    GE              reduce using rule 53 (expr -> expr LT expr .)
    GT              reduce using rule 53 (expr -> expr LT expr .)
    LE              reduce using rule 53 (expr -> expr LT expr .)
    LT              reduce using rule 53 (expr -> expr LT expr .)
    AND             reduce using rule 53 (expr -> expr LT expr .)
    OR              reduce using rule 53 (expr -> expr LT expr .)
    ANDAND          reduce using rule 53 (expr -> expr LT expr .)
    OROR            reduce using rule 53 (expr -> expr LT expr .)
    ELLIPSIS        reduce using rule 53 (expr -> expr LT expr .)
    ASSIGN          reduce using rule 53 (expr -> expr LT expr .)
    LCURL           reduce using rule 53 (expr -> expr LT expr .)
    LPAREN          reduce using rule 53 (expr -> expr LT expr .)
    RPAREN          reduce using rule 53 (expr -> expr LT expr .)
    RSQR            reduce using rule 53 (expr -> expr LT expr .)
    COMMA           reduce using rule 53 (expr -> expr LT expr .)
    STRING          reduce using rule 53 (expr -> expr LT expr .)
    NUMBER          reduce using rule 53 (expr -> expr LT expr .)
    NAME            reduce using rule 53 (expr -> expr LT expr .)
    NOT             reduce using rule 53 (expr -> expr LT expr .)
    AT              reduce using rule 53 (expr -> expr LT expr .)
    LSQR            reduce using rule 53 (expr -> expr LT expr .)
    RCURL           reduce using rule 53 (expr -> expr LT expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 103

    (54) expr -> expr AND expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 54 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr AND expr .)
    AND             reduce using rule 54 (expr -> expr AND expr .)
    OR              reduce using rule 54 (expr -> expr AND expr .)
    ANDAND          reduce using rule 54 (expr -> expr AND expr .)
    OROR            reduce using rule 54 (expr -> expr AND expr .)
    ELLIPSIS        reduce using rule 54 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 54 (expr -> expr AND expr .)
    LCURL           reduce using rule 54 (expr -> expr AND expr .)
    LPAREN          reduce using rule 54 (expr -> expr AND expr .)
    RPAREN          reduce using rule 54 (expr -> expr AND expr .)
    RSQR            reduce using rule 54 (expr -> expr AND expr .)
    COMMA           reduce using rule 54 (expr -> expr AND expr .)
    STRING          reduce using rule 54 (expr -> expr AND expr .)
    NUMBER          reduce using rule 54 (expr -> expr AND expr .)
    NAME            reduce using rule 54 (expr -> expr AND expr .)
    NOT             reduce using rule 54 (expr -> expr AND expr .)
    AT              reduce using rule 54 (expr -> expr AND expr .)
    LSQR            reduce using rule 54 (expr -> expr AND expr .)
    RCURL           reduce using rule 54 (expr -> expr AND expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 104

    (55) expr -> expr OR expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 55 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr OR expr .)
    OR              reduce using rule 55 (expr -> expr OR expr .)
    ANDAND          reduce using rule 55 (expr -> expr OR expr .)
    OROR            reduce using rule 55 (expr -> expr OR expr .)
    ELLIPSIS        reduce using rule 55 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 55 (expr -> expr OR expr .)
    LCURL           reduce using rule 55 (expr -> expr OR expr .)
    LPAREN          reduce using rule 55 (expr -> expr OR expr .)
    RPAREN          reduce using rule 55 (expr -> expr OR expr .)
    RSQR            reduce using rule 55 (expr -> expr OR expr .)
    COMMA           reduce using rule 55 (expr -> expr OR expr .)
    STRING          reduce using rule 55 (expr -> expr OR expr .)
    NUMBER          reduce using rule 55 (expr -> expr OR expr .)
    NAME            reduce using rule 55 (expr -> expr OR expr .)
    NOT             reduce using rule 55 (expr -> expr OR expr .)
    AT              reduce using rule 55 (expr -> expr OR expr .)
    LSQR            reduce using rule 55 (expr -> expr OR expr .)
    RCURL           reduce using rule 55 (expr -> expr OR expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 105

    (56) expr -> expr ANDAND expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 56 (expr -> expr ANDAND expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr ANDAND expr .)
    ANDAND          reduce using rule 56 (expr -> expr ANDAND expr .)
    OROR            reduce using rule 56 (expr -> expr ANDAND expr .)
    ELLIPSIS        reduce using rule 56 (expr -> expr ANDAND expr .)
    ASSIGN          reduce using rule 56 (expr -> expr ANDAND expr .)
    LCURL           reduce using rule 56 (expr -> expr ANDAND expr .)
    LPAREN          reduce using rule 56 (expr -> expr ANDAND expr .)
    RPAREN          reduce using rule 56 (expr -> expr ANDAND expr .)
    RSQR            reduce using rule 56 (expr -> expr ANDAND expr .)
    COMMA           reduce using rule 56 (expr -> expr ANDAND expr .)
    STRING          reduce using rule 56 (expr -> expr ANDAND expr .)
    NUMBER          reduce using rule 56 (expr -> expr ANDAND expr .)
    NAME            reduce using rule 56 (expr -> expr ANDAND expr .)
    NOT             reduce using rule 56 (expr -> expr ANDAND expr .)
    AT              reduce using rule 56 (expr -> expr ANDAND expr .)
    LSQR            reduce using rule 56 (expr -> expr ANDAND expr .)
    RCURL           reduce using rule 56 (expr -> expr ANDAND expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 106

    (57) expr -> expr OROR expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 57 (expr -> expr OROR expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr OROR expr .)
    OROR            reduce using rule 57 (expr -> expr OROR expr .)
    ELLIPSIS        reduce using rule 57 (expr -> expr OROR expr .)
    ASSIGN          reduce using rule 57 (expr -> expr OROR expr .)
    LCURL           reduce using rule 57 (expr -> expr OROR expr .)
    LPAREN          reduce using rule 57 (expr -> expr OROR expr .)
    RPAREN          reduce using rule 57 (expr -> expr OROR expr .)
    RSQR            reduce using rule 57 (expr -> expr OROR expr .)
    COMMA           reduce using rule 57 (expr -> expr OROR expr .)
    STRING          reduce using rule 57 (expr -> expr OROR expr .)
    NUMBER          reduce using rule 57 (expr -> expr OROR expr .)
    NAME            reduce using rule 57 (expr -> expr OROR expr .)
    NOT             reduce using rule 57 (expr -> expr OROR expr .)
    AT              reduce using rule 57 (expr -> expr OROR expr .)
    LSQR            reduce using rule 57 (expr -> expr OROR expr .)
    RCURL           reduce using rule 57 (expr -> expr OROR expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 107

    (58) expr -> expr COLON expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 58 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 58 (expr -> expr COLON expr .)
    NE              reduce using rule 58 (expr -> expr COLON expr .)
    EQ              reduce using rule 58 (expr -> expr COLON expr .)
    GE              reduce using rule 58 (expr -> expr COLON expr .)
    GT              reduce using rule 58 (expr -> expr COLON expr .)
    LE              reduce using rule 58 (expr -> expr COLON expr .)
    LT              reduce using rule 58 (expr -> expr COLON expr .)
    AND             reduce using rule 58 (expr -> expr COLON expr .)
    OR              reduce using rule 58 (expr -> expr COLON expr .)
    ANDAND          reduce using rule 58 (expr -> expr COLON expr .)
    OROR            reduce using rule 58 (expr -> expr COLON expr .)
    COLON           reduce using rule 58 (expr -> expr COLON expr .)
    ELLIPSIS        reduce using rule 58 (expr -> expr COLON expr .)
    ASSIGN          reduce using rule 58 (expr -> expr COLON expr .)
    LCURL           reduce using rule 58 (expr -> expr COLON expr .)
    LPAREN          reduce using rule 58 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 58 (expr -> expr COLON expr .)
    RSQR            reduce using rule 58 (expr -> expr COLON expr .)
    COMMA           reduce using rule 58 (expr -> expr COLON expr .)
    STRING          reduce using rule 58 (expr -> expr COLON expr .)
    NUMBER          reduce using rule 58 (expr -> expr COLON expr .)
    NAME            reduce using rule 58 (expr -> expr COLON expr .)
    NOT             reduce using rule 58 (expr -> expr COLON expr .)
    AT              reduce using rule 58 (expr -> expr COLON expr .)
    LSQR            reduce using rule 58 (expr -> expr COLON expr .)
    RCURL           reduce using rule 58 (expr -> expr COLON expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    DOT             shift and go to state 55


state 108

    (63) expr -> expr DOT NAME .
    NEWLINE         reduce using rule 63 (expr -> expr DOT NAME .)
    SEMICOLON       reduce using rule 63 (expr -> expr DOT NAME .)
    CTRANSPOSE      reduce using rule 63 (expr -> expr DOT NAME .)
    TRANSPOSE       reduce using rule 63 (expr -> expr DOT NAME .)
    MPOWER          reduce using rule 63 (expr -> expr DOT NAME .)
    POWER           reduce using rule 63 (expr -> expr DOT NAME .)
    LDIVIDE         reduce using rule 63 (expr -> expr DOT NAME .)
    RDIVIDE         reduce using rule 63 (expr -> expr DOT NAME .)
    TIMES           reduce using rule 63 (expr -> expr DOT NAME .)
    MLDIVIDE        reduce using rule 63 (expr -> expr DOT NAME .)
    MRDIVIDE        reduce using rule 63 (expr -> expr DOT NAME .)
    MTIMES          reduce using rule 63 (expr -> expr DOT NAME .)
    MINUS           reduce using rule 63 (expr -> expr DOT NAME .)
    PLUS            reduce using rule 63 (expr -> expr DOT NAME .)
    NE              reduce using rule 63 (expr -> expr DOT NAME .)
    EQ              reduce using rule 63 (expr -> expr DOT NAME .)
    GE              reduce using rule 63 (expr -> expr DOT NAME .)
    GT              reduce using rule 63 (expr -> expr DOT NAME .)
    LE              reduce using rule 63 (expr -> expr DOT NAME .)
    LT              reduce using rule 63 (expr -> expr DOT NAME .)
    AND             reduce using rule 63 (expr -> expr DOT NAME .)
    OR              reduce using rule 63 (expr -> expr DOT NAME .)
    ANDAND          reduce using rule 63 (expr -> expr DOT NAME .)
    OROR            reduce using rule 63 (expr -> expr DOT NAME .)
    COLON           reduce using rule 63 (expr -> expr DOT NAME .)
    DOT             reduce using rule 63 (expr -> expr DOT NAME .)
    ELLIPSIS        reduce using rule 63 (expr -> expr DOT NAME .)
    ASSIGN          reduce using rule 63 (expr -> expr DOT NAME .)
    LCURL           reduce using rule 63 (expr -> expr DOT NAME .)
    LPAREN          reduce using rule 63 (expr -> expr DOT NAME .)
    RPAREN          reduce using rule 63 (expr -> expr DOT NAME .)
    RSQR            reduce using rule 63 (expr -> expr DOT NAME .)
    COMMA           reduce using rule 63 (expr -> expr DOT NAME .)
    STRING          reduce using rule 63 (expr -> expr DOT NAME .)
    NUMBER          reduce using rule 63 (expr -> expr DOT NAME .)
    NAME            reduce using rule 63 (expr -> expr DOT NAME .)
    NOT             reduce using rule 63 (expr -> expr DOT NAME .)
    AT              reduce using rule 63 (expr -> expr DOT NAME .)
    LSQR            reduce using rule 63 (expr -> expr DOT NAME .)
    RCURL           reduce using rule 63 (expr -> expr DOT NAME .)


state 109

    (64) expr -> expr ELLIPSIS NEWLINE .
    NEWLINE         reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    SEMICOLON       reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    CTRANSPOSE      reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    TRANSPOSE       reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    MPOWER          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    POWER           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LDIVIDE         reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    RDIVIDE         reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    TIMES           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    MLDIVIDE        reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    MRDIVIDE        reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    MTIMES          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    MINUS           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    PLUS            reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    NE              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    EQ              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    GE              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    GT              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LE              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LT              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    AND             reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    OR              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    ANDAND          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    OROR            reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    COLON           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    DOT             reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    ELLIPSIS        reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    ASSIGN          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LCURL           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LPAREN          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    RPAREN          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    RSQR            reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    COMMA           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    STRING          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    NUMBER          reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    NAME            reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    NOT             reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    AT              reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    LSQR            reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)
    RCURL           reduce using rule 64 (expr -> expr ELLIPSIS NEWLINE .)


state 110

    (66) expr -> expr ASSIGN expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    NEWLINE         reduce using rule 66 (expr -> expr ASSIGN expr .)
    SEMICOLON       reduce using rule 66 (expr -> expr ASSIGN expr .)
    ELLIPSIS        reduce using rule 66 (expr -> expr ASSIGN expr .)
    ASSIGN          reduce using rule 66 (expr -> expr ASSIGN expr .)
    LCURL           reduce using rule 66 (expr -> expr ASSIGN expr .)
    LPAREN          reduce using rule 66 (expr -> expr ASSIGN expr .)
    RPAREN          reduce using rule 66 (expr -> expr ASSIGN expr .)
    RSQR            reduce using rule 66 (expr -> expr ASSIGN expr .)
    COMMA           reduce using rule 66 (expr -> expr ASSIGN expr .)
    STRING          reduce using rule 66 (expr -> expr ASSIGN expr .)
    NUMBER          reduce using rule 66 (expr -> expr ASSIGN expr .)
    NAME            reduce using rule 66 (expr -> expr ASSIGN expr .)
    NOT             reduce using rule 66 (expr -> expr ASSIGN expr .)
    AT              reduce using rule 66 (expr -> expr ASSIGN expr .)
    LSQR            reduce using rule 66 (expr -> expr ASSIGN expr .)
    RCURL           reduce using rule 66 (expr -> expr ASSIGN expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55


state 111

    (75) args -> expr .
    (76) args -> expr . COMMA expr
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
  ! shift/reduce conflict for COMMA resolved as shift
    RCURL           reduce using rule 75 (args -> expr .)
    RPAREN          reduce using rule 75 (args -> expr .)
    COMMA           shift and go to state 142
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 112

    (73) expr -> expr LCURL args . RCURL
    (77) args -> args . COMMA expr
    RCURL           shift and go to state 143
    COMMA           shift and go to state 144


state 113

    (74) expr -> expr LPAREN args . RPAREN
    (77) args -> args . COMMA expr
    RPAREN          shift and go to state 145
    COMMA           shift and go to state 144


state 114

    (9) statement -> switch_block OTHERWISE NEWLINE . code_block END SEMICOLON
    (11) statement -> switch_block OTHERWISE NEWLINE . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    code_block                     shift and go to state 146
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 115

    (10) statement -> switch_block OTHERWISE SEMICOLON . code_block END SEMICOLON
    (12) statement -> switch_block OTHERWISE SEMICOLON . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    code_block                     shift and go to state 147
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 116

    (13) statement -> switch_block END NEWLINE .
    COMMAND         reduce using rule 13 (statement -> switch_block END NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> switch_block END NEWLINE .)
    SEMICOLON       reduce using rule 13 (statement -> switch_block END NEWLINE .)
    TRY             reduce using rule 13 (statement -> switch_block END NEWLINE .)
    WHILE           reduce using rule 13 (statement -> switch_block END NEWLINE .)
    BREAK           reduce using rule 13 (statement -> switch_block END NEWLINE .)
    CONTINUE        reduce using rule 13 (statement -> switch_block END NEWLINE .)
    FOR             reduce using rule 13 (statement -> switch_block END NEWLINE .)
    RETURN          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    FUNCTION        reduce using rule 13 (statement -> switch_block END NEWLINE .)
    STRING          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    NUMBER          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    NAME            reduce using rule 13 (statement -> switch_block END NEWLINE .)
    NOT             reduce using rule 13 (statement -> switch_block END NEWLINE .)
    MINUS           reduce using rule 13 (statement -> switch_block END NEWLINE .)
    PLUS            reduce using rule 13 (statement -> switch_block END NEWLINE .)
    AT              reduce using rule 13 (statement -> switch_block END NEWLINE .)
    LPAREN          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    LSQR            reduce using rule 13 (statement -> switch_block END NEWLINE .)
    LCURL           reduce using rule 13 (statement -> switch_block END NEWLINE .)
    SWITCH          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    IF              reduce using rule 13 (statement -> switch_block END NEWLINE .)
    $end            reduce using rule 13 (statement -> switch_block END NEWLINE .)
    CATCH           reduce using rule 13 (statement -> switch_block END NEWLINE .)
    END             reduce using rule 13 (statement -> switch_block END NEWLINE .)
    ELSEIF          reduce using rule 13 (statement -> switch_block END NEWLINE .)
    ELSE            reduce using rule 13 (statement -> switch_block END NEWLINE .)
    OTHERWISE       reduce using rule 13 (statement -> switch_block END NEWLINE .)
    CASE            reduce using rule 13 (statement -> switch_block END NEWLINE .)


state 117

    (32) switch_block -> switch_block CASE statement . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    statement                      shift and go to state 2
    code_block                     shift and go to state 148
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 118

    (14) statement -> TRY code_block CATCH . statement code_block END NEWLINE
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 149
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 119

    (15) statement -> WHILE statement code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 150
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 120

    (16) statement -> if_block END SEMICOLON .
    COMMAND         reduce using rule 16 (statement -> if_block END SEMICOLON .)
    NEWLINE         reduce using rule 16 (statement -> if_block END SEMICOLON .)
    SEMICOLON       reduce using rule 16 (statement -> if_block END SEMICOLON .)
    TRY             reduce using rule 16 (statement -> if_block END SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> if_block END SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> if_block END SEMICOLON .)
    CONTINUE        reduce using rule 16 (statement -> if_block END SEMICOLON .)
    FOR             reduce using rule 16 (statement -> if_block END SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    FUNCTION        reduce using rule 16 (statement -> if_block END SEMICOLON .)
    STRING          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    NUMBER          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    NAME            reduce using rule 16 (statement -> if_block END SEMICOLON .)
    NOT             reduce using rule 16 (statement -> if_block END SEMICOLON .)
    MINUS           reduce using rule 16 (statement -> if_block END SEMICOLON .)
    PLUS            reduce using rule 16 (statement -> if_block END SEMICOLON .)
    AT              reduce using rule 16 (statement -> if_block END SEMICOLON .)
    LPAREN          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    LSQR            reduce using rule 16 (statement -> if_block END SEMICOLON .)
    LCURL           reduce using rule 16 (statement -> if_block END SEMICOLON .)
    SWITCH          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    IF              reduce using rule 16 (statement -> if_block END SEMICOLON .)
    $end            reduce using rule 16 (statement -> if_block END SEMICOLON .)
    CATCH           reduce using rule 16 (statement -> if_block END SEMICOLON .)
    END             reduce using rule 16 (statement -> if_block END SEMICOLON .)
    ELSEIF          reduce using rule 16 (statement -> if_block END SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> if_block END SEMICOLON .)
    OTHERWISE       reduce using rule 16 (statement -> if_block END SEMICOLON .)
    CASE            reduce using rule 16 (statement -> if_block END SEMICOLON .)


state 121

    (17) statement -> if_block END NEWLINE .
    COMMAND         reduce using rule 17 (statement -> if_block END NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> if_block END NEWLINE .)
    SEMICOLON       reduce using rule 17 (statement -> if_block END NEWLINE .)
    TRY             reduce using rule 17 (statement -> if_block END NEWLINE .)
    WHILE           reduce using rule 17 (statement -> if_block END NEWLINE .)
    BREAK           reduce using rule 17 (statement -> if_block END NEWLINE .)
    CONTINUE        reduce using rule 17 (statement -> if_block END NEWLINE .)
    FOR             reduce using rule 17 (statement -> if_block END NEWLINE .)
    RETURN          reduce using rule 17 (statement -> if_block END NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> if_block END NEWLINE .)
    STRING          reduce using rule 17 (statement -> if_block END NEWLINE .)
    NUMBER          reduce using rule 17 (statement -> if_block END NEWLINE .)
    NAME            reduce using rule 17 (statement -> if_block END NEWLINE .)
    NOT             reduce using rule 17 (statement -> if_block END NEWLINE .)
    MINUS           reduce using rule 17 (statement -> if_block END NEWLINE .)
    PLUS            reduce using rule 17 (statement -> if_block END NEWLINE .)
    AT              reduce using rule 17 (statement -> if_block END NEWLINE .)
    LPAREN          reduce using rule 17 (statement -> if_block END NEWLINE .)
    LSQR            reduce using rule 17 (statement -> if_block END NEWLINE .)
    LCURL           reduce using rule 17 (statement -> if_block END NEWLINE .)
    SWITCH          reduce using rule 17 (statement -> if_block END NEWLINE .)
    IF              reduce using rule 17 (statement -> if_block END NEWLINE .)
    $end            reduce using rule 17 (statement -> if_block END NEWLINE .)
    CATCH           reduce using rule 17 (statement -> if_block END NEWLINE .)
    END             reduce using rule 17 (statement -> if_block END NEWLINE .)
    ELSEIF          reduce using rule 17 (statement -> if_block END NEWLINE .)
    ELSE            reduce using rule 17 (statement -> if_block END NEWLINE .)
    OTHERWISE       reduce using rule 17 (statement -> if_block END NEWLINE .)
    CASE            reduce using rule 17 (statement -> if_block END NEWLINE .)


state 122

    (28) if_block -> if_block ELSEIF statement . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    statement                      shift and go to state 2
    code_block                     shift and go to state 151
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 123

    (29) if_block -> if_block ELSE SEMICOLON . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    code_block                     shift and go to state 152
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 124

    (30) if_block -> if_block ELSE NEWLINE . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    code_block                     shift and go to state 153
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 125

    (22) statement -> FOR statement code_block . END SEMICOLON
    (23) statement -> FOR statement code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 154
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 126

    (24) statement -> RETURN expr SEMICOLON .
    COMMAND         reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    NEWLINE         reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    SEMICOLON       reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    TRY             reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    FUNCTION        reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    NAME            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    AT              reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    LSQR            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    LCURL           reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    SWITCH          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    $end            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    CATCH           reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    END             reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    OTHERWISE       reduce using rule 24 (statement -> RETURN expr SEMICOLON .)
    CASE            reduce using rule 24 (statement -> RETURN expr SEMICOLON .)


state 127

    (25) statement -> RETURN expr NEWLINE .
    COMMAND         reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    NEWLINE         reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    SEMICOLON       reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    TRY             reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    WHILE           reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    BREAK           reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    CONTINUE        reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    FOR             reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    RETURN          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    FUNCTION        reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    STRING          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    NUMBER          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    NAME            reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    NOT             reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    MINUS           reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    PLUS            reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    AT              reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    LPAREN          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    LSQR            reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    LCURL           reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    SWITCH          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    IF              reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    $end            reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    CATCH           reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    END             reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    ELSEIF          reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    ELSE            reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    OTHERWISE       reduce using rule 25 (statement -> RETURN expr NEWLINE .)
    CASE            reduce using rule 25 (statement -> RETURN expr NEWLINE .)


state 128

    (26) statement -> FUNCTION statement code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 155
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 129

    (62) expr -> AT LPAREN args . RPAREN expr
    (77) args -> args . COMMA expr
    RPAREN          shift and go to state 156
    COMMA           shift and go to state 144


state 130

    (65) expr -> LPAREN expr RPAREN .
    NEWLINE         reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    CTRANSPOSE      reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MPOWER          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LDIVIDE         reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    RDIVIDE         reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MLDIVIDE        reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MRDIVIDE        reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MTIMES          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    ASSIGN          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LCURL           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    RSQR            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NAME            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    AT              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LSQR            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    RCURL           reduce using rule 65 (expr -> LPAREN expr RPAREN .)


state 131

    (67) expr -> LSQR matrx_rows matrx_elements . RSQR
    (79) matrx_rows -> matrx_rows matrx_elements . SEMICOLON
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RSQR            shift and go to state 157
    SEMICOLON       shift and go to state 158
    COMMA           shift and go to state 136
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 132

    (69) expr -> LSQR matrx_rows RSQR .
    NEWLINE         reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    SEMICOLON       reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    CTRANSPOSE      reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    TRANSPOSE       reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    MPOWER          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    POWER           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LDIVIDE         reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    RDIVIDE         reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    TIMES           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    MLDIVIDE        reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    MRDIVIDE        reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    MTIMES          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    MINUS           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    PLUS            reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    NE              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    EQ              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    GE              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    GT              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LE              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LT              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    AND             reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    OR              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    ANDAND          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    OROR            reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    COLON           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    DOT             reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    ELLIPSIS        reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    ASSIGN          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LCURL           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LPAREN          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    RPAREN          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    RSQR            reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    COMMA           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    STRING          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    NUMBER          reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    NAME            reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    NOT             reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    AT              reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    LSQR            reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)
    RCURL           reduce using rule 69 (expr -> LSQR matrx_rows RSQR .)


state 133

    (82) matrx_elements -> matrx_elements matrx_elements .
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
  ! shift/reduce conflict for LCURL resolved as shift
    RSQR            reduce using rule 82 (matrx_elements -> matrx_elements matrx_elements .)
    SEMICOLON       reduce using rule 82 (matrx_elements -> matrx_elements matrx_elements .)
    RCURL           reduce using rule 82 (matrx_elements -> matrx_elements matrx_elements .)
    COMMA           shift and go to state 136
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 134

    (68) expr -> LSQR matrx_elements RSQR .
    NEWLINE         reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    SEMICOLON       reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    CTRANSPOSE      reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    TRANSPOSE       reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    MPOWER          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    POWER           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LDIVIDE         reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    RDIVIDE         reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    TIMES           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    MLDIVIDE        reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    MRDIVIDE        reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    MTIMES          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    MINUS           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    PLUS            reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    NE              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    EQ              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    GE              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    GT              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LE              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LT              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    AND             reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    OR              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    ANDAND          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    OROR            reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    COLON           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    DOT             reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    ELLIPSIS        reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    ASSIGN          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LCURL           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LPAREN          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    RPAREN          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    RSQR            reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    COMMA           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    STRING          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    NUMBER          reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    NAME            reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    NOT             reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    AT              reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    LSQR            reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)
    RCURL           reduce using rule 68 (expr -> LSQR matrx_elements RSQR .)


state 135

    (78) matrx_rows -> matrx_elements SEMICOLON .
    RSQR            reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    STRING          reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    NUMBER          reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    NAME            reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    NOT             reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    MINUS           reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    PLUS            reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    AT              reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    LPAREN          reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    LSQR            reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    LCURL           reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)
    RCURL           reduce using rule 78 (matrx_rows -> matrx_elements SEMICOLON .)


state 136

    (81) matrx_elements -> matrx_elements COMMA . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 159
    expr                           shift and go to state 82

state 137

    (70) expr -> LCURL matrx_rows matrx_elements . RCURL
    (79) matrx_rows -> matrx_rows matrx_elements . SEMICOLON
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RCURL           shift and go to state 160
    SEMICOLON       shift and go to state 158
    COMMA           shift and go to state 136
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 138

    (72) expr -> LCURL matrx_rows RCURL .
    NEWLINE         reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    SEMICOLON       reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    CTRANSPOSE      reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    TRANSPOSE       reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    MPOWER          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    POWER           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LDIVIDE         reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    RDIVIDE         reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    TIMES           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    MLDIVIDE        reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    MRDIVIDE        reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    MTIMES          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    MINUS           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    PLUS            reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    NE              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    EQ              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    GE              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    GT              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LE              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LT              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    AND             reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    OR              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    ANDAND          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    OROR            reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    COLON           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    DOT             reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    ELLIPSIS        reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    ASSIGN          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LCURL           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LPAREN          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    RPAREN          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    RSQR            reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    COMMA           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    STRING          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    NUMBER          reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    NAME            reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    NOT             reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    AT              reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    LSQR            reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)
    RCURL           reduce using rule 72 (expr -> LCURL matrx_rows RCURL .)


state 139

    (71) expr -> LCURL matrx_elements RCURL .
    NEWLINE         reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    SEMICOLON       reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    CTRANSPOSE      reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    TRANSPOSE       reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    MPOWER          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    POWER           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LDIVIDE         reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    RDIVIDE         reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    TIMES           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    MLDIVIDE        reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    MRDIVIDE        reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    MTIMES          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    MINUS           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    PLUS            reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    NE              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    EQ              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    GE              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    GT              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LE              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LT              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    AND             reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    OR              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    ANDAND          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    OROR            reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    COLON           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    DOT             reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    ELLIPSIS        reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    ASSIGN          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LCURL           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LPAREN          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    RPAREN          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    RSQR            reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    COMMA           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    STRING          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    NUMBER          reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    NAME            reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    NOT             reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    AT              reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    LSQR            reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)
    RCURL           reduce using rule 71 (expr -> LCURL matrx_elements RCURL .)


state 140

    (31) switch_block -> SWITCH statement CASE . statement code_block
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 161
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 141

    (27) if_block -> IF statement code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             reduce using rule 27 (if_block -> IF statement code_block .)
    ELSEIF          reduce using rule 27 (if_block -> IF statement code_block .)
    ELSE            reduce using rule 27 (if_block -> IF statement code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 142

    (76) args -> expr COMMA . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 162

state 143

    (73) expr -> expr LCURL args RCURL .
    NEWLINE         reduce using rule 73 (expr -> expr LCURL args RCURL .)
    SEMICOLON       reduce using rule 73 (expr -> expr LCURL args RCURL .)
    CTRANSPOSE      reduce using rule 73 (expr -> expr LCURL args RCURL .)
    TRANSPOSE       reduce using rule 73 (expr -> expr LCURL args RCURL .)
    MPOWER          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    POWER           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LDIVIDE         reduce using rule 73 (expr -> expr LCURL args RCURL .)
    RDIVIDE         reduce using rule 73 (expr -> expr LCURL args RCURL .)
    TIMES           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    MLDIVIDE        reduce using rule 73 (expr -> expr LCURL args RCURL .)
    MRDIVIDE        reduce using rule 73 (expr -> expr LCURL args RCURL .)
    MTIMES          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    MINUS           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    PLUS            reduce using rule 73 (expr -> expr LCURL args RCURL .)
    NE              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    EQ              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    GE              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    GT              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LE              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LT              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    AND             reduce using rule 73 (expr -> expr LCURL args RCURL .)
    OR              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    ANDAND          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    OROR            reduce using rule 73 (expr -> expr LCURL args RCURL .)
    COLON           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    DOT             reduce using rule 73 (expr -> expr LCURL args RCURL .)
    ELLIPSIS        reduce using rule 73 (expr -> expr LCURL args RCURL .)
    ASSIGN          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LCURL           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LPAREN          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    RPAREN          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    RSQR            reduce using rule 73 (expr -> expr LCURL args RCURL .)
    COMMA           reduce using rule 73 (expr -> expr LCURL args RCURL .)
    STRING          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    NUMBER          reduce using rule 73 (expr -> expr LCURL args RCURL .)
    NAME            reduce using rule 73 (expr -> expr LCURL args RCURL .)
    NOT             reduce using rule 73 (expr -> expr LCURL args RCURL .)
    AT              reduce using rule 73 (expr -> expr LCURL args RCURL .)
    LSQR            reduce using rule 73 (expr -> expr LCURL args RCURL .)
    RCURL           reduce using rule 73 (expr -> expr LCURL args RCURL .)


state 144

    (77) args -> args COMMA . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 163

state 145

    (74) expr -> expr LPAREN args RPAREN .
    NEWLINE         reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    CTRANSPOSE      reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    TRANSPOSE       reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    MPOWER          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    POWER           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LDIVIDE         reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    RDIVIDE         reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    TIMES           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    MLDIVIDE        reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    MRDIVIDE        reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    MTIMES          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    MINUS           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    PLUS            reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    NE              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    EQ              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    GE              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    GT              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LE              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LT              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    AND             reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    OR              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    ANDAND          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    OROR            reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    COLON           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    DOT             reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    ELLIPSIS        reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    ASSIGN          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LCURL           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LPAREN          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    RPAREN          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    RSQR            reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    COMMA           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    STRING          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    NUMBER          reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    NAME            reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    NOT             reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    AT              reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    LSQR            reduce using rule 74 (expr -> expr LPAREN args RPAREN .)
    RCURL           reduce using rule 74 (expr -> expr LPAREN args RPAREN .)


state 146

    (9) statement -> switch_block OTHERWISE NEWLINE code_block . END SEMICOLON
    (11) statement -> switch_block OTHERWISE NEWLINE code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 164
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 147

    (10) statement -> switch_block OTHERWISE SEMICOLON code_block . END SEMICOLON
    (12) statement -> switch_block OTHERWISE SEMICOLON code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 165
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 148

    (32) switch_block -> switch_block CASE statement code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    OTHERWISE       reduce using rule 32 (switch_block -> switch_block CASE statement code_block .)
    END             reduce using rule 32 (switch_block -> switch_block CASE statement code_block .)
    CASE            reduce using rule 32 (switch_block -> switch_block CASE statement code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    switch_block                   shift and go to state 7
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    if_block                       shift and go to state 10

state 149

    (14) statement -> TRY code_block CATCH statement . code_block END NEWLINE
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    code_block                     shift and go to state 166
    statement                      shift and go to state 2
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 150

    (15) statement -> WHILE statement code_block END . NEWLINE
    NEWLINE         shift and go to state 167


state 151

    (28) if_block -> if_block ELSEIF statement code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             reduce using rule 28 (if_block -> if_block ELSEIF statement code_block .)
    ELSEIF          reduce using rule 28 (if_block -> if_block ELSEIF statement code_block .)
    ELSE            reduce using rule 28 (if_block -> if_block ELSEIF statement code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 152

    (29) if_block -> if_block ELSE SEMICOLON code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             reduce using rule 29 (if_block -> if_block ELSE SEMICOLON code_block .)
    ELSEIF          reduce using rule 29 (if_block -> if_block ELSE SEMICOLON code_block .)
    ELSE            reduce using rule 29 (if_block -> if_block ELSE SEMICOLON code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 153

    (30) if_block -> if_block ELSE NEWLINE code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             reduce using rule 30 (if_block -> if_block ELSE NEWLINE code_block .)
    ELSEIF          reduce using rule 30 (if_block -> if_block ELSE NEWLINE code_block .)
    ELSE            reduce using rule 30 (if_block -> if_block ELSE NEWLINE code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    if_block                       shift and go to state 10
    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7

state 154

    (22) statement -> FOR statement code_block END . SEMICOLON
    (23) statement -> FOR statement code_block END . NEWLINE
    SEMICOLON       shift and go to state 168
    NEWLINE         shift and go to state 169


state 155

    (26) statement -> FUNCTION statement code_block END . NEWLINE
    NEWLINE         shift and go to state 170


state 156

    (62) expr -> AT LPAREN args RPAREN . expr
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25

    expr                           shift and go to state 171

state 157

    (67) expr -> LSQR matrx_rows matrx_elements RSQR .
    NEWLINE         reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    SEMICOLON       reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    CTRANSPOSE      reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    TRANSPOSE       reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    MPOWER          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    POWER           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LDIVIDE         reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    RDIVIDE         reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    TIMES           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    MLDIVIDE        reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    MRDIVIDE        reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    MTIMES          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    MINUS           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    PLUS            reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    NE              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    EQ              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    GE              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    GT              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LE              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LT              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    AND             reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    OR              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    ANDAND          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    OROR            reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    COLON           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    DOT             reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    ELLIPSIS        reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    ASSIGN          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LCURL           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LPAREN          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    RPAREN          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    RSQR            reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    COMMA           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    STRING          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    NUMBER          reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    NAME            reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    NOT             reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    AT              reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    LSQR            reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)
    RCURL           reduce using rule 67 (expr -> LSQR matrx_rows matrx_elements RSQR .)


state 158

    (79) matrx_rows -> matrx_rows matrx_elements SEMICOLON .
    RSQR            reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    STRING          reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    NUMBER          reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    NAME            reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    NOT             reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    MINUS           reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    PLUS            reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    AT              reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    LPAREN          reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    LSQR            reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    LCURL           reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)
    RCURL           reduce using rule 79 (matrx_rows -> matrx_rows matrx_elements SEMICOLON .)


state 159

    (81) matrx_elements -> matrx_elements COMMA matrx_elements .
    (81) matrx_elements -> matrx_elements . COMMA matrx_elements
    (82) matrx_elements -> matrx_elements . matrx_elements
    (80) matrx_elements -> . expr
    (81) matrx_elements -> . matrx_elements COMMA matrx_elements
    (82) matrx_elements -> . matrx_elements matrx_elements
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    RSQR            reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    SEMICOLON       reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    COMMA           reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    STRING          reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    NUMBER          reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    NAME            reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    AT              reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    LPAREN          reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    LSQR            reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    LCURL           reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    RCURL           reduce using rule 81 (matrx_elements -> matrx_elements COMMA matrx_elements .)
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20

    matrx_elements                 shift and go to state 133
    expr                           shift and go to state 82

state 160

    (70) expr -> LCURL matrx_rows matrx_elements RCURL .
    NEWLINE         reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    SEMICOLON       reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    CTRANSPOSE      reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    TRANSPOSE       reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    MPOWER          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    POWER           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LDIVIDE         reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    RDIVIDE         reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    TIMES           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    MLDIVIDE        reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    MRDIVIDE        reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    MTIMES          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    MINUS           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    PLUS            reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    NE              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    EQ              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    GE              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    GT              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LE              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LT              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    AND             reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    OR              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    ANDAND          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    OROR            reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    COLON           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    DOT             reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    ELLIPSIS        reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    ASSIGN          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LCURL           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LPAREN          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    RPAREN          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    RSQR            reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    COMMA           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    STRING          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    NUMBER          reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    NAME            reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    NOT             reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    AT              reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    LSQR            reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)
    RCURL           reduce using rule 70 (expr -> LCURL matrx_rows matrx_elements RCURL .)


state 161

    (31) switch_block -> SWITCH statement CASE statement . code_block
    (1) code_block -> . statement
    (2) code_block -> . statement code_block
    (3) code_block -> . code_block statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 2
    code_block                     shift and go to state 172
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 162

    (76) args -> expr COMMA expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    RCURL           reduce using rule 76 (args -> expr COMMA expr .)
    COMMA           reduce using rule 76 (args -> expr COMMA expr .)
    RPAREN          reduce using rule 76 (args -> expr COMMA expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 163

    (77) args -> args COMMA expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
    RCURL           reduce using rule 77 (args -> args COMMA expr .)
    COMMA           reduce using rule 77 (args -> args COMMA expr .)
    RPAREN          reduce using rule 77 (args -> args COMMA expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 164

    (9) statement -> switch_block OTHERWISE NEWLINE code_block END . SEMICOLON
    (11) statement -> switch_block OTHERWISE NEWLINE code_block END . NEWLINE
    SEMICOLON       shift and go to state 174
    NEWLINE         shift and go to state 173


state 165

    (10) statement -> switch_block OTHERWISE SEMICOLON code_block END . SEMICOLON
    (12) statement -> switch_block OTHERWISE SEMICOLON code_block END . NEWLINE
    SEMICOLON       shift and go to state 175
    NEWLINE         shift and go to state 176


state 166

    (14) statement -> TRY code_block CATCH statement code_block . END NEWLINE
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    END             shift and go to state 177
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 167

    (15) statement -> WHILE statement code_block END NEWLINE .
    COMMAND         reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    SEMICOLON       reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    TRY             reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    WHILE           reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    BREAK           reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    CONTINUE        reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    FOR             reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    RETURN          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    STRING          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    NUMBER          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    NAME            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    NOT             reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    MINUS           reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    PLUS            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    AT              reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    LPAREN          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    LSQR            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    LCURL           reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    SWITCH          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    IF              reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    $end            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    CATCH           reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    END             reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    ELSEIF          reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    ELSE            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    OTHERWISE       reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)
    CASE            reduce using rule 15 (statement -> WHILE statement code_block END NEWLINE .)


state 168

    (22) statement -> FOR statement code_block END SEMICOLON .
    COMMAND         reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    NEWLINE         reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    SEMICOLON       reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    TRY             reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    BREAK           reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    CONTINUE        reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    FOR             reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    FUNCTION        reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    STRING          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    NUMBER          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    NAME            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    NOT             reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    MINUS           reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    PLUS            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    AT              reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    LPAREN          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    LSQR            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    LCURL           reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    SWITCH          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    IF              reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    $end            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    CATCH           reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    END             reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    ELSEIF          reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    OTHERWISE       reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)
    CASE            reduce using rule 22 (statement -> FOR statement code_block END SEMICOLON .)


state 169

    (23) statement -> FOR statement code_block END NEWLINE .
    COMMAND         reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    SEMICOLON       reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    TRY             reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    WHILE           reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    BREAK           reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    CONTINUE        reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    FOR             reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    RETURN          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    STRING          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    NUMBER          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    NAME            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    NOT             reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    MINUS           reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    PLUS            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    AT              reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    LPAREN          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    LSQR            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    LCURL           reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    SWITCH          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    IF              reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    $end            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    CATCH           reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    END             reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    ELSEIF          reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    ELSE            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    OTHERWISE       reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)
    CASE            reduce using rule 23 (statement -> FOR statement code_block END NEWLINE .)


state 170

    (26) statement -> FUNCTION statement code_block END NEWLINE .
    COMMAND         reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    NEWLINE         reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    SEMICOLON       reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    TRY             reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    WHILE           reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    BREAK           reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    CONTINUE        reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    FOR             reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    RETURN          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    FUNCTION        reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    STRING          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    NUMBER          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    NAME            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    NOT             reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    MINUS           reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    PLUS            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    AT              reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    LPAREN          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    LSQR            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    LCURL           reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    SWITCH          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    IF              reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    $end            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    CATCH           reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    END             reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    ELSEIF          reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    ELSE            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    OTHERWISE       reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)
    CASE            reduce using rule 26 (statement -> FUNCTION statement code_block END NEWLINE .)


state 171

    (62) expr -> AT LPAREN args RPAREN expr .
    (36) expr -> expr . CTRANSPOSE
    (37) expr -> expr . TRANSPOSE
    (38) expr -> expr . MPOWER expr
    (39) expr -> expr . POWER expr
    (40) expr -> expr . LDIVIDE expr
    (41) expr -> expr . RDIVIDE expr
    (42) expr -> expr . TIMES expr
    (43) expr -> expr . MLDIVIDE expr
    (44) expr -> expr . MRDIVIDE expr
    (45) expr -> expr . MTIMES expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . NE expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . GE expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . AND expr
    (55) expr -> expr . OR expr
    (56) expr -> expr . ANDAND expr
    (57) expr -> expr . OROR expr
    (58) expr -> expr . COLON expr
    (63) expr -> expr . DOT NAME
    (64) expr -> expr . ELLIPSIS NEWLINE
    (66) expr -> expr . ASSIGN expr
    (73) expr -> expr . LCURL args RCURL
    (74) expr -> expr . LPAREN args RPAREN
  ! shift/reduce conflict for CTRANSPOSE resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for MPOWER resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LDIVIDE resolved as shift
  ! shift/reduce conflict for RDIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MLDIVIDE resolved as shift
  ! shift/reduce conflict for MRDIVIDE resolved as shift
  ! shift/reduce conflict for MTIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LCURL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    NEWLINE         reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    SEMICOLON       reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    RPAREN          reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    RSQR            reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    COMMA           reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    STRING          reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    NUMBER          reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    NAME            reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    NOT             reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    AT              reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    LSQR            reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    RCURL           reduce using rule 62 (expr -> AT LPAREN args RPAREN expr .)
    CTRANSPOSE      shift and go to state 32
    TRANSPOSE       shift and go to state 33
    MPOWER          shift and go to state 34
    POWER           shift and go to state 35
    LDIVIDE         shift and go to state 36
    RDIVIDE         shift and go to state 37
    TIMES           shift and go to state 38
    MLDIVIDE        shift and go to state 39
    MRDIVIDE        shift and go to state 40
    MTIMES          shift and go to state 41
    MINUS           shift and go to state 42
    PLUS            shift and go to state 43
    NE              shift and go to state 44
    EQ              shift and go to state 45
    GE              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    LT              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    ANDAND          shift and go to state 52
    OROR            shift and go to state 53
    COLON           shift and go to state 54
    DOT             shift and go to state 55
    ELLIPSIS        shift and go to state 56
    ASSIGN          shift and go to state 57
    LCURL           shift and go to state 58
    LPAREN          shift and go to state 59


state 172

    (31) switch_block -> SWITCH statement CASE statement code_block .
    (3) code_block -> code_block . statement
    (4) statement -> . COMMAND
    (5) statement -> . expr NEWLINE
    (6) statement -> . expr SEMICOLON
    (7) statement -> . NEWLINE
    (8) statement -> . SEMICOLON
    (9) statement -> . switch_block OTHERWISE NEWLINE code_block END SEMICOLON
    (10) statement -> . switch_block OTHERWISE SEMICOLON code_block END SEMICOLON
    (11) statement -> . switch_block OTHERWISE NEWLINE code_block END NEWLINE
    (12) statement -> . switch_block OTHERWISE SEMICOLON code_block END NEWLINE
    (13) statement -> . switch_block END NEWLINE
    (14) statement -> . TRY code_block CATCH statement code_block END NEWLINE
    (15) statement -> . WHILE statement code_block END NEWLINE
    (16) statement -> . if_block END SEMICOLON
    (17) statement -> . if_block END NEWLINE
    (18) statement -> . BREAK SEMICOLON
    (19) statement -> . CONTINUE SEMICOLON
    (20) statement -> . BREAK NEWLINE
    (21) statement -> . CONTINUE NEWLINE
    (22) statement -> . FOR statement code_block END SEMICOLON
    (23) statement -> . FOR statement code_block END NEWLINE
    (24) statement -> . RETURN expr SEMICOLON
    (25) statement -> . RETURN expr NEWLINE
    (26) statement -> . FUNCTION statement code_block END NEWLINE
    (33) expr -> . STRING
    (34) expr -> . NUMBER
    (35) expr -> . NAME
    (36) expr -> . expr CTRANSPOSE
    (37) expr -> . expr TRANSPOSE
    (38) expr -> . expr MPOWER expr
    (39) expr -> . expr POWER expr
    (40) expr -> . expr LDIVIDE expr
    (41) expr -> . expr RDIVIDE expr
    (42) expr -> . expr TIMES expr
    (43) expr -> . expr MLDIVIDE expr
    (44) expr -> . expr MRDIVIDE expr
    (45) expr -> . expr MTIMES expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr NE expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr GE expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr AND expr
    (55) expr -> . expr OR expr
    (56) expr -> . expr ANDAND expr
    (57) expr -> . expr OROR expr
    (58) expr -> . expr COLON expr
    (59) expr -> . NOT expr
    (60) expr -> . MINUS expr
    (61) expr -> . PLUS expr
    (62) expr -> . AT LPAREN args RPAREN expr
    (63) expr -> . expr DOT NAME
    (64) expr -> . expr ELLIPSIS NEWLINE
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . expr ASSIGN expr
    (67) expr -> . LSQR matrx_rows matrx_elements RSQR
    (68) expr -> . LSQR matrx_elements RSQR
    (69) expr -> . LSQR matrx_rows RSQR
    (70) expr -> . LCURL matrx_rows matrx_elements RCURL
    (71) expr -> . LCURL matrx_elements RCURL
    (72) expr -> . LCURL matrx_rows RCURL
    (73) expr -> . expr LCURL args RCURL
    (74) expr -> . expr LPAREN args RPAREN
    (31) switch_block -> . SWITCH statement CASE statement code_block
    (32) switch_block -> . switch_block CASE statement code_block
    (27) if_block -> . IF statement code_block
    (28) if_block -> . if_block ELSEIF statement code_block
    (29) if_block -> . if_block ELSE SEMICOLON code_block
    (30) if_block -> . if_block ELSE NEWLINE code_block
    OTHERWISE       reduce using rule 31 (switch_block -> SWITCH statement CASE statement code_block .)
    END             reduce using rule 31 (switch_block -> SWITCH statement CASE statement code_block .)
    CASE            reduce using rule 31 (switch_block -> SWITCH statement CASE statement code_block .)
    COMMAND         shift and go to state 3
    NEWLINE         shift and go to state 5
    SEMICOLON       shift and go to state 6
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    FOR             shift and go to state 13
    RETURN          shift and go to state 14
    FUNCTION        shift and go to state 15
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 21
    MINUS           shift and go to state 19
    PLUS            shift and go to state 20
    AT              shift and go to state 22
    LPAREN          shift and go to state 23
    LSQR            shift and go to state 24
    LCURL           shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27

    statement                      shift and go to state 28
    expr                           shift and go to state 4
    switch_block                   shift and go to state 7
    if_block                       shift and go to state 10

state 173

    (11) statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .
    COMMAND         reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    SEMICOLON       reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    TRY             reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    WHILE           reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    BREAK           reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    CONTINUE        reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    FOR             reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    RETURN          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    FUNCTION        reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    STRING          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    NUMBER          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    NAME            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    NOT             reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    MINUS           reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    PLUS            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    AT              reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    LPAREN          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    LSQR            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    LCURL           reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    SWITCH          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    IF              reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    $end            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    CATCH           reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    END             reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    ELSEIF          reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    ELSE            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    OTHERWISE       reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)
    CASE            reduce using rule 11 (statement -> switch_block OTHERWISE NEWLINE code_block END NEWLINE .)


state 174

    (9) statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .
    COMMAND         reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    NEWLINE         reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    TRY             reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    FOR             reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    STRING          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    NAME            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    NOT             reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    PLUS            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    AT              reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    LPAREN          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    LSQR            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    LCURL           reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    SWITCH          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    IF              reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    $end            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    CATCH           reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    END             reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    ELSEIF          reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    OTHERWISE       reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)
    CASE            reduce using rule 9 (statement -> switch_block OTHERWISE NEWLINE code_block END SEMICOLON .)


state 175

    (10) statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .
    COMMAND         reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    NEWLINE         reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    SEMICOLON       reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    TRY             reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    FOR             reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    STRING          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    NAME            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    NOT             reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    PLUS            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    AT              reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    LSQR            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    LCURL           reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    SWITCH          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    IF              reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    $end            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    CATCH           reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    END             reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    ELSEIF          reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    OTHERWISE       reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)
    CASE            reduce using rule 10 (statement -> switch_block OTHERWISE SEMICOLON code_block END SEMICOLON .)


state 176

    (12) statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .
    COMMAND         reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    NEWLINE         reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    SEMICOLON       reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    TRY             reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    WHILE           reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    BREAK           reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    CONTINUE        reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    FOR             reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    RETURN          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    FUNCTION        reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    STRING          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    NUMBER          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    NAME            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    NOT             reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    MINUS           reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    PLUS            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    AT              reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    LPAREN          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    LSQR            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    LCURL           reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    SWITCH          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    IF              reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    $end            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    CATCH           reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    END             reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    ELSEIF          reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    ELSE            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    OTHERWISE       reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)
    CASE            reduce using rule 12 (statement -> switch_block OTHERWISE SEMICOLON code_block END NEWLINE .)


state 177

    (14) statement -> TRY code_block CATCH statement code_block END . NEWLINE
    NEWLINE         shift and go to state 178


state 178

    (14) statement -> TRY code_block CATCH statement code_block END NEWLINE .
    COMMAND         reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    NEWLINE         reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    SEMICOLON       reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    TRY             reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    WHILE           reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    BREAK           reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    CONTINUE        reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    FOR             reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    RETURN          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    FUNCTION        reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    STRING          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    NUMBER          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    NAME            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    NOT             reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    MINUS           reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    PLUS            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    AT              reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    LPAREN          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    LSQR            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    LCURL           reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    SWITCH          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    IF              reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    $end            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    CATCH           reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    END             reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    ELSEIF          reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    ELSE            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    OTHERWISE       reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)
    CASE            reduce using rule 14 (statement -> TRY code_block CATCH statement code_block END NEWLINE .)


Conflicts:

shift/reduce conflict for COMMAND in state 2 resolved as shift
shift/reduce conflict for NEWLINE in state 2 resolved as shift
shift/reduce conflict for SEMICOLON in state 2 resolved as shift
shift/reduce conflict for TRY in state 2 resolved as shift
shift/reduce conflict for WHILE in state 2 resolved as shift
shift/reduce conflict for BREAK in state 2 resolved as shift
shift/reduce conflict for CONTINUE in state 2 resolved as shift
shift/reduce conflict for FOR in state 2 resolved as shift
shift/reduce conflict for RETURN in state 2 resolved as shift
shift/reduce conflict for FUNCTION in state 2 resolved as shift
shift/reduce conflict for STRING in state 2 resolved as shift
shift/reduce conflict for NUMBER in state 2 resolved as shift
shift/reduce conflict for NAME in state 2 resolved as shift
shift/reduce conflict for NOT in state 2 resolved as shift
shift/reduce conflict for MINUS in state 2 resolved as shift
shift/reduce conflict for PLUS in state 2 resolved as shift
shift/reduce conflict for AT in state 2 resolved as shift
shift/reduce conflict for LPAREN in state 2 resolved as shift
shift/reduce conflict for LSQR in state 2 resolved as shift
shift/reduce conflict for LCURL in state 2 resolved as shift
shift/reduce conflict for SWITCH in state 2 resolved as shift
shift/reduce conflict for IF in state 2 resolved as shift
shift/reduce conflict for COMMAND in state 29 resolved as shift
shift/reduce conflict for NEWLINE in state 29 resolved as shift
shift/reduce conflict for SEMICOLON in state 29 resolved as shift
shift/reduce conflict for TRY in state 29 resolved as shift
shift/reduce conflict for WHILE in state 29 resolved as shift
shift/reduce conflict for BREAK in state 29 resolved as shift
shift/reduce conflict for CONTINUE in state 29 resolved as shift
shift/reduce conflict for FOR in state 29 resolved as shift
shift/reduce conflict for RETURN in state 29 resolved as shift
shift/reduce conflict for FUNCTION in state 29 resolved as shift
shift/reduce conflict for STRING in state 29 resolved as shift
shift/reduce conflict for NUMBER in state 29 resolved as shift
shift/reduce conflict for NAME in state 29 resolved as shift
shift/reduce conflict for NOT in state 29 resolved as shift
shift/reduce conflict for MINUS in state 29 resolved as shift
shift/reduce conflict for PLUS in state 29 resolved as shift
shift/reduce conflict for AT in state 29 resolved as shift
shift/reduce conflict for LPAREN in state 29 resolved as shift
shift/reduce conflict for LSQR in state 29 resolved as shift
shift/reduce conflict for LCURL in state 29 resolved as shift
shift/reduce conflict for SWITCH in state 29 resolved as shift
shift/reduce conflict for IF in state 29 resolved as shift
shift/reduce conflict for MINUS in state 82 resolved as shift
shift/reduce conflict for PLUS in state 82 resolved as shift
shift/reduce conflict for LCURL in state 82 resolved as shift
shift/reduce conflict for LPAREN in state 82 resolved as shift
shift/reduce conflict for COMMA in state 111 resolved as shift
shift/reduce conflict for COMMA in state 133 resolved as shift
shift/reduce conflict for STRING in state 133 resolved as shift
shift/reduce conflict for NUMBER in state 133 resolved as shift
shift/reduce conflict for NAME in state 133 resolved as shift
shift/reduce conflict for NOT in state 133 resolved as shift
shift/reduce conflict for MINUS in state 133 resolved as shift
shift/reduce conflict for PLUS in state 133 resolved as shift
shift/reduce conflict for AT in state 133 resolved as shift
shift/reduce conflict for LPAREN in state 133 resolved as shift
shift/reduce conflict for LSQR in state 133 resolved as shift
shift/reduce conflict for LCURL in state 133 resolved as shift
shift/reduce conflict for CTRANSPOSE in state 171 resolved as shift
shift/reduce conflict for TRANSPOSE in state 171 resolved as shift
shift/reduce conflict for MPOWER in state 171 resolved as shift
shift/reduce conflict for POWER in state 171 resolved as shift
shift/reduce conflict for LDIVIDE in state 171 resolved as shift
shift/reduce conflict for RDIVIDE in state 171 resolved as shift
shift/reduce conflict for TIMES in state 171 resolved as shift
shift/reduce conflict for MLDIVIDE in state 171 resolved as shift
shift/reduce conflict for MRDIVIDE in state 171 resolved as shift
shift/reduce conflict for MTIMES in state 171 resolved as shift
shift/reduce conflict for MINUS in state 171 resolved as shift
shift/reduce conflict for PLUS in state 171 resolved as shift
shift/reduce conflict for NE in state 171 resolved as shift
shift/reduce conflict for EQ in state 171 resolved as shift
shift/reduce conflict for GE in state 171 resolved as shift
shift/reduce conflict for GT in state 171 resolved as shift
shift/reduce conflict for LE in state 171 resolved as shift
shift/reduce conflict for LT in state 171 resolved as shift
shift/reduce conflict for AND in state 171 resolved as shift
shift/reduce conflict for OR in state 171 resolved as shift
shift/reduce conflict for ANDAND in state 171 resolved as shift
shift/reduce conflict for OROR in state 171 resolved as shift
shift/reduce conflict for COLON in state 171 resolved as shift
shift/reduce conflict for DOT in state 171 resolved as shift
shift/reduce conflict for ELLIPSIS in state 171 resolved as shift
shift/reduce conflict for ASSIGN in state 171 resolved as shift
shift/reduce conflict for LCURL in state 171 resolved as shift
shift/reduce conflict for LPAREN in state 171 resolved as shift